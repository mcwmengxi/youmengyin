import{_ as s,c as i,o as a,V as n}from"./chunks/framework.aonwggn9.js";const g=JSON.parse('{"title":"JavaScript 相关","description":"","frontmatter":{},"headers":[],"relativePath":"article/ques/ques-javascript.md","filePath":"article/ques/ques-javascript.md","lastUpdated":1709641072000}'),l={name:"article/ques/ques-javascript.md"},p=n(`<h1 id="javascript-相关" tabindex="-1">JavaScript 相关 <a class="header-anchor" href="#javascript-相关" aria-label="Permalink to &quot;JavaScript 相关&quot;">​</a></h1><h2 id="闭包函数" tabindex="-1">闭包函数 <a class="header-anchor" href="#闭包函数" aria-label="Permalink to &quot;闭包函数&quot;">​</a></h2><blockquote><p>闭包定义</p></blockquote><p>闭包就是能够读取其他函数内部变量的函数</p><p>例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fun1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>闭包是指有权访问另⼀个函数作⽤域中变量的函数，创建闭包的最常⻅的⽅式就是在⼀个函数内创建另⼀个函数，通过另⼀个函数访问这个函数的局部变量,利⽤闭包可以突破作用域</p><blockquote><p>闭包的特性</p></blockquote><ul><li>函数内再嵌套函数</li><li>内部函数可以引⽤外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul><blockquote><p>垃圾回收机制是什么？</p></blockquote><p>由于字符串、对象等没有固定的大小，js 程序在每次创建字符串、对象的时候，程序都会<strong>分配内存来存储那个实体</strong></p><ul><li>使用分配到的内存做点什么</li><li>不需要时将其释放回归</li></ul><p>在不需要字符串、对象的时候，需要释放其所占用的内存，否则将会消耗完系统中所有可用的内存，造成系统崩溃，这就是<strong>垃圾回收机制所存在的意义</strong></p><p>在 C 和 C++之类的语言中，需要手动来管理内存的，这也是造成许多不必要问题的根源。幸运的是，在编写 js 的过程中，内存的分配以及内存的回收完全实现了自动管理，我们不用操心这种事情</p><blockquote><p>说说你对闭包的理解</p></blockquote><ul><li><p>使⽤闭包主要是为了设计私有的⽅法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增⼤内存使⽤量，使⽤不当很容易造成内存泄露。在 js 中，函数即闭包，只有函数才会产⽣作⽤域的概念</p></li><li><p>闭包 的最⼤⽤处有两个，⼀个是可以读取函数内部的变量，另⼀个就是让这些变量始终保持在内存中</p></li><li><p>闭包的另⼀个⽤处，是封装对象的私有属性和私有⽅法</p></li><li><p><strong>好处：</strong> 能够实现封装和缓存等</p></li><li><p><strong>坏处：</strong> 就是消耗内存、不正当使⽤会造成内存溢出的问题</p></li></ul><blockquote><p>使用闭包需要的注意点</p></blockquote><ul><li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很⼤，所以不能滥⽤闭包，否则会造成⽹⻚的性能问题，在 IE 中可能导致内存泄露</p></li><li><p>解决⽅法是，在退出函数之前，将不使⽤的局部变量全部删除</p></li></ul><h2 id="说说你对作用域链的理解" tabindex="-1">说说你对作用域链的理解 <a class="header-anchor" href="#说说你对作用域链的理解" aria-label="Permalink to &quot;说说你对作用域链的理解&quot;">​</a></h2><ul><li>作⽤域链的作用是保证执行环境里有权访问的变量和函数是有序的，作⽤域链的变量只能向上访问，变量访问到 <code>window</code> 对象即被终止，作用域链向下访问变量是不被允许的</li><li>简单的说，作⽤域就是变量与函数的可访问范围，即作⽤域控制着变量与函数的可见性和⽣命周期</li></ul><h2 id="var、let-和-const-的区别" tabindex="-1">var、let 和 const 的区别 <a class="header-anchor" href="#var、let-和-const-的区别" aria-label="Permalink to &quot;var、let 和 const 的区别&quot;">​</a></h2><p><strong>var</strong></p><ul><li>全局作用域（变量在哪里声明都可以被访问到）</li><li>变量声明提升（变量可以先使用，再声明，但是值为 <code>undfined</code>）</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值是 undefind</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>可以重复声明</li></ul><blockquote><p>以上特点都是缺点！</p></blockquote><p><strong>let</strong></p><ul><li>局部作用域（通过<code>{}</code>来区分作用域）常见于函数</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 作用域外</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 作用域内</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>同一个作用域下不能重复声明</li><li>不能变量声明提升</li></ul><p><strong>const</strong></p><ul><li>局部作用域（通过<code>{}</code>来区分作用域）常见于函数</li><li>同一个作用域下不能重复声明</li><li>const 声明必须赋值</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>不能变量声明提升</li><li>const 声明的是常量，一旦声明不能改变</li></ul><blockquote><p>基本类型不能改变，引用类型可以更改里面的属性值</p></blockquote><h2 id="解释一下什么是事件代理" tabindex="-1">解释一下什么是事件代理 <a class="header-anchor" href="#解释一下什么是事件代理" aria-label="Permalink to &quot;解释一下什么是事件代理&quot;">​</a></h2><p>事件代理（Event Delegation ）有称之为事件委托，是 JavaScript 中绑定事件的常用技巧。</p><p>顾名思义，事件代理，即是把原本需要处理的事件委托给父级，让父元素担当事件监听的职务。事件代理的原理是 DOM 元素的事件冒泡。</p><p>使用事件代理的好处是提高性能。</p><h2 id="事件模型" tabindex="-1">事件模型 <a class="header-anchor" href="#事件模型" aria-label="Permalink to &quot;事件模型&quot;">​</a></h2><p>W3C 中定义事件的发生经历三个阶段：</p><ul><li>捕获阶段(capturing)</li><li>⽬标阶段(targetin)</li><li>冒泡阶段(bubbling)</li></ul><blockquote><p>W3C 标准：标签闭合、标签⼩写、不乱嵌套、使⽤外链 css 和 js 、结构行为表现的分离</p></blockquote><ul><li><p>冒泡型事件：当你使⽤事件冒泡时，子级元素先触发，父级元素后触发</p></li><li><p>捕获型事件：当你使⽤事件捕获时，父级元素先触发，子级元素后触发</p></li><li><p>DOM 事件流：同时⽀持两种事件模型：捕获型事件和冒泡型事件</p></li><li><p>阻⽌冒泡：在 W3c 中，使⽤ stopPropagation() ⽅法；在 IE 下设置 cancelBubble = true</p></li><li><p>阻⽌捕获：阻⽌事件的默认⾏为，例如 click - <code>&lt;a&gt;</code> 后的跳转。在 W3c 中，使⽤ <code>preventDefault()</code> ⽅法，在 IE 下设置 window.event.returnValue = false</p></li></ul><h2 id="如何解决跨域问题" tabindex="-1">如何解决跨域问题 <a class="header-anchor" href="#如何解决跨域问题" aria-label="Permalink to &quot;如何解决跨域问题&quot;">​</a></h2><blockquote><p>跨域是什么？</p></blockquote><p>跨域，是指浏览器不能执行其他网站的脚本。它是由<strong>浏览器的同源策略</strong>造成的，是浏览器对 JavaScript 实施的安全限制。</p><blockquote><p>同源策略是什么？</p></blockquote><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以 xyz.com 下的 js 脚本采用 ajax 读取 abc.com 里面的文件数据是会被拒绝的。 相同 ip（域名），同端口，则为同源，否则为不同源。 在默认情况下，在不同源的情况下，是不能使用 ajax 来请求数据的。</p><blockquote><p>使用 jsonP 跨域</p></blockquote><p>ajax 默认是不能跨域的，但是 script 标签可以通过 src 属性获得跨域的 js 文件。 需要注意的是 <strong>jsonP 并不属于 ajax，但是 jQuery 把 jsonP 封装在了 ajax 方法中</strong> jsonP 是在引入 jQuery 之后，在前端发送一个 <code>jsonP</code> 的请求，在后台也要做相应的 jsonP 的配置，前后端相互配合才能正常的交互数据，那么 jsonP 只能处理 GET 请求，那么对于其它的请求，参考下方<strong>设置响应头</strong></p><p>jQuery 发送 jsonp 请求实例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://abc.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dataType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsonp&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>axios 发送 jsonp 请求实例</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jsonp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://abc.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>CORS（设置响应头）</p></blockquote><p>通过设置 http 协议的响应头部属性<code>Access-Control-Allow-Origin</code>可以允许其他服务器对本服务进行</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/getdata&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://127.0.0.1:8080&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ctx.set(&#39;Access-Control-Allow-Origin&#39;, &#39;服务器地址&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;data&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果是 Access-Control-Allow-Origin: *，就代表任何网站都可以来请求 该方式只是服务端做处理即可，客户端不需要任何处理</p><blockquote><p>服务代理</p></blockquote><p>如果我们接口服务器和客户端是不同源的，可以在新建一个同源的服务器，作为代理服务器，因为服务器也可以发送请求，而且不受跨域限制，那么就可以使用代理服务器向接口服务器发送请求，那么接口服务器收到请求之后，把数据交给代理服务器，再有代理服务器返回给客户端，实现跨域请求。</p><p>那么服务代理在 Vue 中怎么配置呢？</p><p>可以通过 Vue cli 的 <code>devServer.proxy</code> 配置可以解决这个问题，详情参见文档：<a href="https://cli.vuejs.org/zh/config/#devserver-proxy" target="_blank" rel="noreferrer">https://cli.vuejs.org/zh/config/#devserver-proxy</a></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>那么目前比较主流的 就是 CORS 和 服务器代理，jsonp 很少用，因为 jsonp 只支持 get 请求</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,64),e=[p];function t(h,r,k,c,o,d){return a(),i("div",null,e)}const E=s(l,[["render",t]]);export{g as __pageData,E as default};
