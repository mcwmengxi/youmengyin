import{_ as s,c as i,o as n,a4 as a}from"./chunks/framework.BqiyKu1v.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/devops/jenkins.md","filePath":"docs/devops/jenkins.md","lastUpdated":1711297244000}'),e={name:"docs/devops/jenkins.md"},p=a(`<h2 id="jenkins" tabindex="-1">jenkins <a class="header-anchor" href="#jenkins" aria-label="Permalink to &quot;jenkins&quot;">​</a></h2><h3 id="全局工具配置" tabindex="-1">全局工具配置 <a class="header-anchor" href="#全局工具配置" aria-label="Permalink to &quot;全局工具配置&quot;">​</a></h3><p>系统配置ssh <img src="https://img-blog.csdnimg.cn/6d39bb3bd74d4308b445263031d638ab.png" alt=""></p><p>全局工具配置 node.js</p><p><img src="https://img-blog.csdnimg.cn/da190acdf86a457182ab51e7e8db6271.png" alt=""></p><h3 id="github相关配置" tabindex="-1">github相关配置 <a class="header-anchor" href="#github相关配置" aria-label="Permalink to &quot;github相关配置&quot;">​</a></h3><p>生成GitHub的token用于Jenkins</p><ul><li>确认jenkins安装Github Plugin插件 在系统配置中设置github信息,选择add github server, 填写相关凭据即可 选择Sercet Text设置好GitHub Personal Access Token,测试验证是否连接成功</li></ul><h3 id="打包jenkins项目配置-configure" tabindex="-1">打包jenkins项目配置(configure) <a class="header-anchor" href="#打包jenkins项目配置-configure" aria-label="Permalink to &quot;打包jenkins项目配置(configure)&quot;">​</a></h3><blockquote><p>坑1、Repository URL地址报错，这里我们填入是项目吃 clone 地址，可以尝试Clone with SSH、Clone with HTTPS两个地址都尝试一下。</p></blockquote><blockquote><p>坑2、无法下拉选择配置的权限用户。直接点击 Add 添加一个权限用户以Username with password，直接用 GitHub的登录名称和命名创建。这个时候完成了就应该跳出下拉选项了；</p></blockquote><p>填写github项目地址(项目url路径) <img src="https://img-blog.csdnimg.cn/4c1d58a21a014a9a9922d32e0dbb2657.png" alt=""></p><p>git仓库管理,ssh方式报错了, 采用https方式, Credentials采用用户名+密码方式 <img src="https://img-blog.csdnimg.cn/25337fe4a0df4c81be3ca282247210f7.png" alt=""></p><p>指定master分支, 选择githubweb浏览器, url填写仓库地址https形式 <img src="https://img-blog.csdnimg.cn/e8b6d1e7064041439a6c4d5cd34310c5.png" alt=""></p><p>指定构建触发器: GitHub hook trigger for GITScm polling</p><p>指定构建环境: Use secret text(s) or file(s), 绑定选择secret text, 对应凭据选择用户名+私钥模式; 选择事先在全局工具中配置的node.js 构建shell,将编译产物打tar包，留作构建后操作使用</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zcvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./dist</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>任务配置-构建后操作 将tar包放到服务器指定目录 解压tar包，将物料放置在nginx工作目录下 <img src="https://img-blog.csdnimg.cn/b4666a414e3141ae8ffeb62e51c7840d.png" alt=""></p><p>tar xvf youmengyin/dist.tar -C /home/webserver/static/youmengyin/dist/</p><ul><li>Jenkins build时有时候报Error fetching remote repo ‘origin’ 直接清空工作空间, 将缓存清理掉。如果需要每次构建后都删除,可以直接在构建后选择清理工作空间</li></ul><p><img src="https://img-blog.csdnimg.cn/5095d534e6dd4657b6ee4e2b367480ce.png" alt=""></p><p>安装docker-compose 一个完整的应用程序，往往都不是一个容器组成的，而是通过容器组成一个容器群。一个容器群的搭建需要执行太多命令，更重要的是需要考虑太多应用和容器间的依赖关系处理，是一波令人头大的操作。docker-compose正是解决多个容器之间管理的问题。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)-$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/docker-compose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>curl 使用不了可以通过pip安装</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> epel-release</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> centos8中的pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 已升级为pip3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3-pip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>docker-compose -version 命令不存在的情况</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-Linux-x86_64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose-Linux-x86_64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose-Linux-x86_64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/docker-compose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>[root@luo home]# mkdir compose [root@luo home]# mkdir jenkins [root@luo home]# mkdir nginx</p><p>[root@luo home]# ls compose es hilde jenkins lek nginx</p><p>[root@luo home]# cd compose/ [root@luo compose]# touch docker-compose.yml [root@luo compose]# cd ../nginx [root@luo nginx]# mkdir conf.d</p><p>[root@luo nginx]# cd conf.d/ [root@luo conf.d]# touch nginx.conf [root@luo conf.d]# vim nginx.conf</p><p>[root@luo compose]# vim docker-compose.yml</p><p>编写docker-compose.yml</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">version:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">services:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                      # 集合</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  docker_jenkins:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    user:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                 # 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            # 重启方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins:lts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    container_name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # 容器名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                     # 对外暴露的端口定义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:50000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                   # 卷挂载路径</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/docker:/usr/bin/docker</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  docker_nginx:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    container_name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8090</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 433</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:433</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/nginx/conf.d/:/etc/nginx/conf.d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/webserver/static/jenkins/dist/:/usr/share/nginx/html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>现在新版的Jenkins容器在页面上重启的话 都会把容器停止掉而不重启 每次安装完插件后自己手工重启一下Jenkins容器</p><p>5ebde6b51761 docker exec -it jenkins/jenkins bash</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run -d -u root --rm -p 9510:8080 --name jenkins -v jenkins-data:/var/jenkins_home jenkins/jenkins</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>1.首先使用ssh工具上传xz包到Linux的​​/usr/local​​目录： xz -d node-v16.16.0-linux-x64.tar.xz 变成tar 2.使用docker命令复制到docker容器下指定的目录（注意容器是正在启动的）： docker cp /usr/local/node-v16.16.0-linux-x64.tar jenkins:/var/jenkins_home/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/node16 3.进入容器，查看: docker exec -it jenkins bash</p><p>tar -xvf node-v16.16.0-linux-x64.tar</p><p>#nodejs export PATH=/var/jenkins_home/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/node16/node-v16.16.0-linux-x64/bin:PATH</p><p>npm config set registry <a href="https://registry.npmjs.org" target="_blank" rel="noreferrer">https://registry.npmjs.org</a></p><p><img src="https://img-blog.csdnimg.cn/a9a8119bc6354e4ea760ebb617a2c097.png" alt=""></p><p>content里添加<code>registry=https://registry.npmjs.org</code></p>`,43),l=[p];function t(h,r,k,o,d,c){return n(),i("div",null,l)}const m=s(e,[["render",t]]);export{g as __pageData,m as default};
