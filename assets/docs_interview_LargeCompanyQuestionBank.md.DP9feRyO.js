import{_ as a,c as e,o as r,a4 as t}from"./chunks/framework.C2K-FukO.js";const _=JSON.parse('{"title":"前端面试 - JavaScript【大厂相关】","description":"","frontmatter":{},"headers":[],"relativePath":"docs/interview/LargeCompanyQuestionBank.md","filePath":"docs/interview/LargeCompanyQuestionBank.md","lastUpdated":1715615164000}'),o={name:"docs/interview/LargeCompanyQuestionBank.md"},h=t('<h1 id="前端面试-javascript【大厂相关】" tabindex="-1">前端面试 - JavaScript【大厂相关】 <a class="header-anchor" href="#前端面试-javascript【大厂相关】" aria-label="Permalink to &quot;前端面试 - JavaScript【大厂相关】&quot;">​</a></h1><p>[TOC]</p><h2 id="一、阿里-25-问" tabindex="-1">一、阿里(25 问) <a class="header-anchor" href="#一、阿里-25-问" aria-label="Permalink to &quot;一、阿里(25 问)&quot;">​</a></h2><h3 id="_1-使用过的koa2中间件" tabindex="-1">1. 使⽤过的koa2中间件 <a class="header-anchor" href="#_1-使用过的koa2中间件" aria-label="Permalink to &quot;1. 使⽤过的koa2中间件&quot;">​</a></h3><h3 id="_2-koa-body原理" tabindex="-1">2. koa-body原理 <a class="header-anchor" href="#_2-koa-body原理" aria-label="Permalink to &quot;2. koa-body原理&quot;">​</a></h3><h3 id="_3-介绍自己写过的中间件" tabindex="-1">3. 介绍⾃⼰写过的中间件 <a class="header-anchor" href="#_3-介绍自己写过的中间件" aria-label="Permalink to &quot;3. 介绍⾃⼰写过的中间件&quot;">​</a></h3><h3 id="_4-有没有涉及到cluster" tabindex="-1">4. 有没有涉及到Cluster <a class="header-anchor" href="#_4-有没有涉及到cluster" aria-label="Permalink to &quot;4. 有没有涉及到Cluster&quot;">​</a></h3><h3 id="_5-master挂了的话pm2怎么处理" tabindex="-1">5. master挂了的话pm2怎么处理 <a class="header-anchor" href="#_5-master挂了的话pm2怎么处理" aria-label="Permalink to &quot;5. master挂了的话pm2怎么处理&quot;">​</a></h3><h3 id="_6-如何和mysql进行通信" tabindex="-1">6. 如何和MySQL进⾏通信 <a class="header-anchor" href="#_6-如何和mysql进行通信" aria-label="Permalink to &quot;6. 如何和MySQL进⾏通信&quot;">​</a></h3><h3 id="_7-react声明周期及自己的理解" tabindex="-1">7. React声明周期及⾃⼰的理解 <a class="header-anchor" href="#_7-react声明周期及自己的理解" aria-label="Permalink to &quot;7. React声明周期及⾃⼰的理解&quot;">​</a></h3><h3 id="_8-如何配置react-router" tabindex="-1">8. 如何配置React-Router <a class="header-anchor" href="#_8-如何配置react-router" aria-label="Permalink to &quot;8. 如何配置React-Router&quot;">​</a></h3><h3 id="_9-路由的动态加载模块" tabindex="-1">9. 路由的动态加载模块 <a class="header-anchor" href="#_9-路由的动态加载模块" aria-label="Permalink to &quot;9. 路由的动态加载模块&quot;">​</a></h3><h3 id="_10-服务端渲染ssr" tabindex="-1">10. 服务端渲染SSR <a class="header-anchor" href="#_10-服务端渲染ssr" aria-label="Permalink to &quot;10. 服务端渲染SSR&quot;">​</a></h3><h3 id="_11-介绍路由的-history-与-browser-的区别" tabindex="-1">11. 介绍路由的 history 与 browser 的区别 <a class="header-anchor" href="#_11-介绍路由的-history-与-browser-的区别" aria-label="Permalink to &quot;11. 介绍路由的 history 与 browser 的区别&quot;">​</a></h3><h3 id="_12-介绍redux数据流的流程" tabindex="-1">12. 介绍Redux数据流的流程 <a class="header-anchor" href="#_12-介绍redux数据流的流程" aria-label="Permalink to &quot;12. 介绍Redux数据流的流程&quot;">​</a></h3><h3 id="_13-redux如何实现多个组件之间的通信-多个组件使用相同状态如何进行-管理" tabindex="-1">13. Redux如何实现多个组件之间的通信，多个组件使⽤相同状态如何进⾏ 管理 <a class="header-anchor" href="#_13-redux如何实现多个组件之间的通信-多个组件使用相同状态如何进行-管理" aria-label="Permalink to &quot;13. Redux如何实现多个组件之间的通信，多个组件使⽤相同状态如何进⾏ 管理&quot;">​</a></h3><h3 id="_14-多个组件之间如何拆分各自的state-每块小的组件有自己的状态-它们-之间还有一些公共的状态需要维护-如何思考这块" tabindex="-1">14. 多个组件之间如何拆分各⾃的state，每块⼩的组件有⾃⼰的状态，它们 之间还有⼀些公共的状态需要维护，如何思考这块 <a class="header-anchor" href="#_14-多个组件之间如何拆分各自的state-每块小的组件有自己的状态-它们-之间还有一些公共的状态需要维护-如何思考这块" aria-label="Permalink to &quot;14. 多个组件之间如何拆分各⾃的state，每块⼩的组件有⾃⼰的状态，它们 之间还有⼀些公共的状态需要维护，如何思考这块&quot;">​</a></h3><h3 id="_15-使用过的redux中间件" tabindex="-1">15. 使⽤过的Redux中间件 <a class="header-anchor" href="#_15-使用过的redux中间件" aria-label="Permalink to &quot;15. 使⽤过的Redux中间件&quot;">​</a></h3><h3 id="_16-常⻅http请求头" tabindex="-1">16. 常⻅Http请求头 <a class="header-anchor" href="#_16-常⻅http请求头" aria-label="Permalink to &quot;16. 常⻅Http请求头&quot;">​</a></h3><h3 id="_17-如何解决跨域的问题" tabindex="-1">17. 如何解决跨域的问题 <a class="header-anchor" href="#_17-如何解决跨域的问题" aria-label="Permalink to &quot;17. 如何解决跨域的问题&quot;">​</a></h3><h3 id="_18-移动端适配1px的问题" tabindex="-1">18. 移动端适配1px的问题 <a class="header-anchor" href="#_18-移动端适配1px的问题" aria-label="Permalink to &quot;18. 移动端适配1px的问题&quot;">​</a></h3><h3 id="_19-介绍flex布局" tabindex="-1">19. 介绍flex布局 <a class="header-anchor" href="#_19-介绍flex布局" aria-label="Permalink to &quot;19. 介绍flex布局&quot;">​</a></h3><h3 id="_20-使用过webpack里面哪些plugin和loader" tabindex="-1">20. 使⽤过webpack⾥⾯哪些plugin和loader <a class="header-anchor" href="#_20-使用过webpack里面哪些plugin和loader" aria-label="Permalink to &quot;20. 使⽤过webpack⾥⾯哪些plugin和loader&quot;">​</a></h3><h3 id="_21-webpack里面的插件是怎么实现的" tabindex="-1">21. webpack⾥⾯的插件是怎么实现的 ? <a class="header-anchor" href="#_21-webpack里面的插件是怎么实现的" aria-label="Permalink to &quot;21. webpack⾥⾯的插件是怎么实现的 ?&quot;">​</a></h3><h3 id="_22-dev-server是怎么跑起来的" tabindex="-1">22. dev-server是怎么跑起来的 ? <a class="header-anchor" href="#_22-dev-server是怎么跑起来的" aria-label="Permalink to &quot;22. dev-server是怎么跑起来的 ?&quot;">​</a></h3><h3 id="_23-抽取公共文件是怎么配置的" tabindex="-1">23. 抽取公共⽂件是怎么配置的 ? <a class="header-anchor" href="#_23-抽取公共文件是怎么配置的" aria-label="Permalink to &quot;23. 抽取公共⽂件是怎么配置的 ?&quot;">​</a></h3><h3 id="_24-项目中如何处理安全问题" tabindex="-1">24. 项⽬中如何处理安全问题 <a class="header-anchor" href="#_24-项目中如何处理安全问题" aria-label="Permalink to &quot;24. 项⽬中如何处理安全问题&quot;">​</a></h3><h3 id="_25-怎么实现this对象的深拷⻉" tabindex="-1">25. 怎么实现this对象的深拷⻉ <a class="header-anchor" href="#_25-怎么实现this对象的深拷⻉" aria-label="Permalink to &quot;25. 怎么实现this对象的深拷⻉&quot;">​</a></h3><h2 id="二、网易-26-问" tabindex="-1">二、网易(26 问) <a class="header-anchor" href="#二、网易-26-问" aria-label="Permalink to &quot;二、网易(26 问)&quot;">​</a></h2><h3 id="_1-介绍redux-主要解决什么问题" tabindex="-1">1. 介绍redux，主要解决什么问题 <a class="header-anchor" href="#_1-介绍redux-主要解决什么问题" aria-label="Permalink to &quot;1. 介绍redux，主要解决什么问题&quot;">​</a></h3><h3 id="_2-文件上传如何做断点续传" tabindex="-1">2. ⽂件上传如何做断点续传 <a class="header-anchor" href="#_2-文件上传如何做断点续传" aria-label="Permalink to &quot;2. ⽂件上传如何做断点续传&quot;">​</a></h3><h3 id="_3-表单可以跨域吗" tabindex="-1">3. 表单可以跨域吗 <a class="header-anchor" href="#_3-表单可以跨域吗" aria-label="Permalink to &quot;3. 表单可以跨域吗&quot;">​</a></h3><h3 id="_4-promise、async有什么区别" tabindex="-1">4. promise、async有什么区别 <a class="header-anchor" href="#_4-promise、async有什么区别" aria-label="Permalink to &quot;4. promise、async有什么区别&quot;">​</a></h3><h3 id="_5-搜索请求如何处理-防抖" tabindex="-1">5. 搜索请求如何处理（防抖） <a class="header-anchor" href="#_5-搜索请求如何处理-防抖" aria-label="Permalink to &quot;5. 搜索请求如何处理（防抖）&quot;">​</a></h3><h3 id="_6-搜索请求中文如何请求" tabindex="-1">6. 搜索请求中⽂如何请求 <a class="header-anchor" href="#_6-搜索请求中文如何请求" aria-label="Permalink to &quot;6. 搜索请求中⽂如何请求&quot;">​</a></h3><h3 id="_7-介绍观察者模式" tabindex="-1">7. 介绍观察者模式 <a class="header-anchor" href="#_7-介绍观察者模式" aria-label="Permalink to &quot;7. 介绍观察者模式&quot;">​</a></h3><h3 id="_8-介绍中介者模式" tabindex="-1">8. 介绍中介者模式 <a class="header-anchor" href="#_8-介绍中介者模式" aria-label="Permalink to &quot;8. 介绍中介者模式&quot;">​</a></h3><h3 id="_9-观察者和订阅-发布的区别-各自用在哪里" tabindex="-1">9. 观察者和订阅-发布的区别，各⾃⽤在哪⾥ <a class="header-anchor" href="#_9-观察者和订阅-发布的区别-各自用在哪里" aria-label="Permalink to &quot;9. 观察者和订阅-发布的区别，各⾃⽤在哪⾥&quot;">​</a></h3><h3 id="_10-介绍react优化" tabindex="-1">10. 介绍react优化 <a class="header-anchor" href="#_10-介绍react优化" aria-label="Permalink to &quot;10. 介绍react优化&quot;">​</a></h3><h3 id="_11-介绍http2-0" tabindex="-1">11. 介绍http2.0 <a class="header-anchor" href="#_11-介绍http2-0" aria-label="Permalink to &quot;11. 介绍http2.0&quot;">​</a></h3><h3 id="_12-通过什么做到并发请求" tabindex="-1">12. 通过什么做到并发请求 <a class="header-anchor" href="#_12-通过什么做到并发请求" aria-label="Permalink to &quot;12. 通过什么做到并发请求&quot;">​</a></h3><h3 id="_13-http1-1时如何复用tcp连接" tabindex="-1">13. http1.1时如何复⽤tcp连接 <a class="header-anchor" href="#_13-http1-1时如何复用tcp连接" aria-label="Permalink to &quot;13. http1.1时如何复⽤tcp连接&quot;">​</a></h3><h3 id="_14-介绍service-worker" tabindex="-1">14. 介绍service worker <a class="header-anchor" href="#_14-介绍service-worker" aria-label="Permalink to &quot;14. 介绍service worker&quot;">​</a></h3><h3 id="_15-介绍css3中position-sticky" tabindex="-1">15. 介绍css3中position:sticky <a class="header-anchor" href="#_15-介绍css3中position-sticky" aria-label="Permalink to &quot;15. 介绍css3中position:sticky&quot;">​</a></h3><h3 id="_16-redux请求中间件如何处理并发" tabindex="-1">16. redux请求中间件如何处理并发 <a class="header-anchor" href="#_16-redux请求中间件如何处理并发" aria-label="Permalink to &quot;16. redux请求中间件如何处理并发&quot;">​</a></h3><h3 id="_17-介绍promise-异常捕获" tabindex="-1">17. 介绍Promise，异常捕获 <a class="header-anchor" href="#_17-介绍promise-异常捕获" aria-label="Permalink to &quot;17. 介绍Promise，异常捕获&quot;">​</a></h3><h3 id="_18-介绍position属性包括css3新增" tabindex="-1">18. 介绍position属性包括CSS3新增 <a class="header-anchor" href="#_18-介绍position属性包括css3新增" aria-label="Permalink to &quot;18. 介绍position属性包括CSS3新增&quot;">​</a></h3><h3 id="_19-浏览器事件流向" tabindex="-1">19. 浏览器事件流向 <a class="header-anchor" href="#_19-浏览器事件流向" aria-label="Permalink to &quot;19. 浏览器事件流向&quot;">​</a></h3><h3 id="_20-介绍事件代理以及优缺点" tabindex="-1">20. 介绍事件代理以及优缺点 <a class="header-anchor" href="#_20-介绍事件代理以及优缺点" aria-label="Permalink to &quot;20. 介绍事件代理以及优缺点&quot;">​</a></h3><h3 id="_21-react组件中怎么做事件代理" tabindex="-1">21. React组件中怎么做事件代理 <a class="header-anchor" href="#_21-react组件中怎么做事件代理" aria-label="Permalink to &quot;21. React组件中怎么做事件代理&quot;">​</a></h3><h3 id="_22-react组件事件代理的原理" tabindex="-1">22. React组件事件代理的原理 <a class="header-anchor" href="#_22-react组件事件代理的原理" aria-label="Permalink to &quot;22. React组件事件代理的原理&quot;">​</a></h3><h3 id="_23-介绍this各种情况" tabindex="-1">23. 介绍this各种情况 <a class="header-anchor" href="#_23-介绍this各种情况" aria-label="Permalink to &quot;23. 介绍this各种情况&quot;">​</a></h3><h3 id="_24-前端怎么控制管理路由" tabindex="-1">24. 前端怎么控制管理路由 <a class="header-anchor" href="#_24-前端怎么控制管理路由" aria-label="Permalink to &quot;24. 前端怎么控制管理路由&quot;">​</a></h3><h3 id="_25-使用路由时出现问题如何解决" tabindex="-1">25. 使⽤路由时出现问题如何解决 <a class="header-anchor" href="#_25-使用路由时出现问题如何解决" aria-label="Permalink to &quot;25. 使⽤路由时出现问题如何解决&quot;">​</a></h3><h3 id="_26-react怎么做数据的检查和变化" tabindex="-1">26. React怎么做数据的检查和变化 <a class="header-anchor" href="#_26-react怎么做数据的检查和变化" aria-label="Permalink to &quot;26. React怎么做数据的检查和变化&quot;">​</a></h3><h2 id="三、滴滴-28-问" tabindex="-1">三、滴滴(28 问) <a class="header-anchor" href="#三、滴滴-28-问" aria-label="Permalink to &quot;三、滴滴(28 问)&quot;">​</a></h2><h3 id="_1-react-router怎么实现路由切换" tabindex="-1">1. react-router怎么实现路由切换 <a class="header-anchor" href="#_1-react-router怎么实现路由切换" aria-label="Permalink to &quot;1. react-router怎么实现路由切换&quot;">​</a></h3><h3 id="_2-react-router里的标签和标签有什么区别" tabindex="-1">2. react-router⾥的标签和标签有什么区别 <a class="header-anchor" href="#_2-react-router里的标签和标签有什么区别" aria-label="Permalink to &quot;2. react-router⾥的标签和标签有什么区别&quot;">​</a></h3><h3 id="_3-标签默认事件禁掉之后做了什么才实现了跳转" tabindex="-1">3. 标签默认事件禁掉之后做了什么才实现了跳转 <a class="header-anchor" href="#_3-标签默认事件禁掉之后做了什么才实现了跳转" aria-label="Permalink to &quot;3. 标签默认事件禁掉之后做了什么才实现了跳转&quot;">​</a></h3><h3 id="_4-react层面的性能优化" tabindex="-1">4. React层⾯的性能优化 <a class="header-anchor" href="#_4-react层面的性能优化" aria-label="Permalink to &quot;4. React层⾯的性能优化&quot;">​</a></h3><h3 id="_5-整个前端性能提升大致分几类" tabindex="-1">5. 整个前端性能提升⼤致分⼏类 <a class="header-anchor" href="#_5-整个前端性能提升大致分几类" aria-label="Permalink to &quot;5. 整个前端性能提升⼤致分⼏类&quot;">​</a></h3><h3 id="_6-import-button-from-antd-打包的时候只打包button-分模块加载-是怎么做到的" tabindex="-1">6. import { Button } from &#39;antd&#39;，打包的时候只打包button， 分模块加载，是怎么做到的 <a class="header-anchor" href="#_6-import-button-from-antd-打包的时候只打包button-分模块加载-是怎么做到的" aria-label="Permalink to &quot;6. import { Button } from &#39;antd&#39;，打包的时候只打包button， 分模块加载，是怎么做到的&quot;">​</a></h3><h3 id="_7-使用import时-webpack对node-modules里的依赖会做什么" tabindex="-1">7. 使⽤import时，webpack对node_modules⾥的依赖会做什么 <a class="header-anchor" href="#_7-使用import时-webpack对node-modules里的依赖会做什么" aria-label="Permalink to &quot;7. 使⽤import时，webpack对node_modules⾥的依赖会做什么&quot;">​</a></h3><h3 id="_8-js异步解决方案的发展历程以及优缺点" tabindex="-1">8. JS异步解决⽅案的发展历程以及优缺点 <a class="header-anchor" href="#_8-js异步解决方案的发展历程以及优缺点" aria-label="Permalink to &quot;8. JS异步解决⽅案的发展历程以及优缺点&quot;">​</a></h3><h3 id="_9-http报文的请求会有几个部分" tabindex="-1">9. Http报⽂的请求会有⼏个部分 <a class="header-anchor" href="#_9-http报文的请求会有几个部分" aria-label="Permalink to &quot;9. Http报⽂的请求会有⼏个部分&quot;">​</a></h3><h3 id="_10-cookie放哪里-cookie能做的事情和存在的价值" tabindex="-1">10. cookie放哪⾥，cookie能做的事情和存在的价值 <a class="header-anchor" href="#_10-cookie放哪里-cookie能做的事情和存在的价值" aria-label="Permalink to &quot;10. cookie放哪⾥，cookie能做的事情和存在的价值&quot;">​</a></h3><h3 id="_11-cookie和token都存放在header里面-为什么只劫持前者" tabindex="-1">11. cookie和token都存放在header⾥⾯，为什么只劫持前者 <a class="header-anchor" href="#_11-cookie和token都存放在header里面-为什么只劫持前者" aria-label="Permalink to &quot;11. cookie和token都存放在header⾥⾯，为什么只劫持前者&quot;">​</a></h3><h3 id="_12-cookie和session有哪些方面的区别" tabindex="-1">12. cookie和session有哪些⽅⾯的区别 <a class="header-anchor" href="#_12-cookie和session有哪些方面的区别" aria-label="Permalink to &quot;12. cookie和session有哪些⽅⾯的区别&quot;">​</a></h3><h3 id="_13-react中dom结构发生变化后内部经历了哪些变化" tabindex="-1">13. React中Dom结构发⽣变化后内部经历了哪些变化 <a class="header-anchor" href="#_13-react中dom结构发生变化后内部经历了哪些变化" aria-label="Permalink to &quot;13. React中Dom结构发⽣变化后内部经历了哪些变化&quot;">​</a></h3><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h3 id="_14-react挂载的时候有3个组件-textcomponent、-composecomponent、domcomponent-区别和关系-dom结构发生变化-时怎么区分data的变化-怎么更新-更新怎么调度-如果更新的时候还有其-他任务存在怎么处理" tabindex="-1">14. React挂载的时候有3个组件，textComponent、 composeComponent、domComponent，区别和关系，Dom结构发⽣变化 时怎么区分data的变化，怎么更新，更新怎么调度，如果更新的时候还有其 他任务存在怎么处理 <a class="header-anchor" href="#_14-react挂载的时候有3个组件-textcomponent、-composecomponent、domcomponent-区别和关系-dom结构发生变化-时怎么区分data的变化-怎么更新-更新怎么调度-如果更新的时候还有其-他任务存在怎么处理" aria-label="Permalink to &quot;14. React挂载的时候有3个组件，textComponent、 composeComponent、domComponent，区别和关系，Dom结构发⽣变化 时怎么区分data的变化，怎么更新，更新怎么调度，如果更新的时候还有其 他任务存在怎么处理&quot;">​</a></h3><h3 id="_15-key主要是解决哪一类的问题-为什么不建议用索引index-重绘" tabindex="-1">15. key主要是解决哪⼀类的问题，为什么不建议⽤索引index（重绘） <a class="header-anchor" href="#_15-key主要是解决哪一类的问题-为什么不建议用索引index-重绘" aria-label="Permalink to &quot;15. key主要是解决哪⼀类的问题，为什么不建议⽤索引index（重绘）&quot;">​</a></h3><h3 id="_16-redux中异步的请求怎么处理" tabindex="-1">16. Redux中异步的请求怎么处理 <a class="header-anchor" href="#_16-redux中异步的请求怎么处理" aria-label="Permalink to &quot;16. Redux中异步的请求怎么处理&quot;">​</a></h3><h3 id="_17-redux中间件是什么东⻄-接受几个参数-两端的柯里化函数" tabindex="-1">17. Redux中间件是什么东⻄，接受⼏个参数（两端的柯⾥化函数） <a class="header-anchor" href="#_17-redux中间件是什么东⻄-接受几个参数-两端的柯里化函数" aria-label="Permalink to &quot;17. Redux中间件是什么东⻄，接受⼏个参数（两端的柯⾥化函数）&quot;">​</a></h3><h3 id="_18-柯里化函数两端的参数具体是什么东⻄" tabindex="-1">18. 柯⾥化函数两端的参数具体是什么东⻄ <a class="header-anchor" href="#_18-柯里化函数两端的参数具体是什么东⻄" aria-label="Permalink to &quot;18. 柯⾥化函数两端的参数具体是什么东⻄&quot;">​</a></h3><h3 id="_19-中间件是怎么拿到store和action-然后怎么处理" tabindex="-1">19. 中间件是怎么拿到store和action，然后怎么处理 <a class="header-anchor" href="#_19-中间件是怎么拿到store和action-然后怎么处理" aria-label="Permalink to &quot;19. 中间件是怎么拿到store和action，然后怎么处理&quot;">​</a></h3><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h3><h3 id="_20-state是怎么注入到组件的-从reducer到组件经历了什么样的过程" tabindex="-1">20. state是怎么注⼊到组件的，从reducer到组件经历了什么样的过程 <a class="header-anchor" href="#_20-state是怎么注入到组件的-从reducer到组件经历了什么样的过程" aria-label="Permalink to &quot;20. state是怎么注⼊到组件的，从reducer到组件经历了什么样的过程&quot;">​</a></h3><h3 id="_21-koa中response-send、response-rounded、response-json发生了" tabindex="-1">21. koa中response.send、response.rounded、response.json发⽣了 <a class="header-anchor" href="#_21-koa中response-send、response-rounded、response-json发生了" aria-label="Permalink to &quot;21. koa中response.send、response.rounded、response.json发⽣了&quot;">​</a></h3><h3 id="什么-事-浏览器为什么能识别到它是一个json结构或是html" tabindex="-1">什么 事，浏览器为什么能识别到它是⼀个json结构或是html <a class="header-anchor" href="#什么-事-浏览器为什么能识别到它是一个json结构或是html" aria-label="Permalink to &quot;什么 事，浏览器为什么能识别到它是⼀个json结构或是html&quot;">​</a></h3><h3 id="_22-koa-bodyparser怎么来解析request" tabindex="-1">22. koa-bodyparser怎么来解析request <a class="header-anchor" href="#_22-koa-bodyparser怎么来解析request" aria-label="Permalink to &quot;22. koa-bodyparser怎么来解析request&quot;">​</a></h3><h3 id="_23-webpack整个生命周期-loader和plugin有什么区别" tabindex="-1">23. webpack整个⽣命周期，loader和plugin有什么区别 <a class="header-anchor" href="#_23-webpack整个生命周期-loader和plugin有什么区别" aria-label="Permalink to &quot;23. webpack整个⽣命周期，loader和plugin有什么区别&quot;">​</a></h3><h3 id="_24-介绍ast-abstract-syntax-tree-抽象语法树" tabindex="-1">24. 介绍AST（Abstract Syntax Tree）抽象语法树 <a class="header-anchor" href="#_24-介绍ast-abstract-syntax-tree-抽象语法树" aria-label="Permalink to &quot;24. 介绍AST（Abstract Syntax Tree）抽象语法树&quot;">​</a></h3><h3 id="_25-安卓activity之间数据是怎么传递的" tabindex="-1">25. 安卓Activity之间数据是怎么传递的 <a class="header-anchor" href="#_25-安卓activity之间数据是怎么传递的" aria-label="Permalink to &quot;25. 安卓Activity之间数据是怎么传递的&quot;">​</a></h3><h3 id="_26-安卓4-0到6-0过程中webview对js兼容性的变化" tabindex="-1">26. 安卓4.0到6.0过程中WebView对js兼容性的变化 <a class="header-anchor" href="#_26-安卓4-0到6-0过程中webview对js兼容性的变化" aria-label="Permalink to &quot;26. 安卓4.0到6.0过程中WebView对js兼容性的变化&quot;">​</a></h3><h3 id="_27-webview和原生是如何通信" tabindex="-1">27. WebView和原⽣是如何通信 <a class="header-anchor" href="#_27-webview和原生是如何通信" aria-label="Permalink to &quot;27. WebView和原⽣是如何通信&quot;">​</a></h3><h3 id="_28-跨域怎么解决-有没有使用过apache等方案" tabindex="-1">28. 跨域怎么解决，有没有使⽤过Apache等⽅案 <a class="header-anchor" href="#_28-跨域怎么解决-有没有使用过apache等方案" aria-label="Permalink to &quot;28. 跨域怎么解决，有没有使⽤过Apache等⽅案&quot;">​</a></h3><h2 id="四、头条-17-问" tabindex="-1">四、头条(17 问) <a class="header-anchor" href="#四、头条-17-问" aria-label="Permalink to &quot;四、头条(17 问)&quot;">​</a></h2><h3 id="_1-对async、await的理解-内部原理" tabindex="-1">1. 对async、await的理解，内部原理 <a class="header-anchor" href="#_1-对async、await的理解-内部原理" aria-label="Permalink to &quot;1. 对async、await的理解，内部原理&quot;">​</a></h3><h3 id="_2-介绍下promise-内部实现" tabindex="-1">2. 介绍下Promise，内部实现 <a class="header-anchor" href="#_2-介绍下promise-内部实现" aria-label="Permalink to &quot;2. 介绍下Promise，内部实现&quot;">​</a></h3><h3 id="_3-清除浮动" tabindex="-1">3. 清除浮动 <a class="header-anchor" href="#_3-清除浮动" aria-label="Permalink to &quot;3. 清除浮动&quot;">​</a></h3><h3 id="_4-定位问题-绝对定位、相对定位等" tabindex="-1">4. 定位问题（绝对定位、相对定位等） <a class="header-anchor" href="#_4-定位问题-绝对定位、相对定位等" aria-label="Permalink to &quot;4. 定位问题（绝对定位、相对定位等）&quot;">​</a></h3><h3 id="_5-从输入url到⻚面加载全过程" tabindex="-1">5. 从输⼊URL到⻚⾯加载全过程 <a class="header-anchor" href="#_5-从输入url到⻚面加载全过程" aria-label="Permalink to &quot;5. 从输⼊URL到⻚⾯加载全过程&quot;">​</a></h3><h3 id="_6-tcp3次握手" tabindex="-1">6. tcp3次握⼿ <a class="header-anchor" href="#_6-tcp3次握手" aria-label="Permalink to &quot;6. tcp3次握⼿&quot;">​</a></h3><h3 id="_7-tcp属于哪一层-1-物理层-2-数据链路层-3-网络层-ip-4-传输层-tcp-5-应用层-http" tabindex="-1">7. tcp属于哪⼀层（1 物理层 -&gt; 2 数据链路层 -&gt; 3 ⽹络层(ip)-&gt; 4 传输层 (tcp) -&gt; 5 应⽤层(http)） <a class="header-anchor" href="#_7-tcp属于哪一层-1-物理层-2-数据链路层-3-网络层-ip-4-传输层-tcp-5-应用层-http" aria-label="Permalink to &quot;7. tcp属于哪⼀层（1 物理层 -&gt; 2 数据链路层 -&gt; 3 ⽹络层(ip)-&gt; 4 传输层 (tcp) -&gt; 5 应⽤层(http)）&quot;">​</a></h3><h3 id="_8-redux的设计思想" tabindex="-1">8. redux的设计思想 <a class="header-anchor" href="#_8-redux的设计思想" aria-label="Permalink to &quot;8. redux的设计思想&quot;">​</a></h3><h3 id="_9-接入redux的过程" tabindex="-1">9. 接⼊redux的过程 <a class="header-anchor" href="#_9-接入redux的过程" aria-label="Permalink to &quot;9. 接⼊redux的过程&quot;">​</a></h3><h3 id="_10-绑定connect的过程" tabindex="-1">10. 绑定connect的过程 <a class="header-anchor" href="#_10-绑定connect的过程" aria-label="Permalink to &quot;10. 绑定connect的过程&quot;">​</a></h3><h3 id="_11-connect原理" tabindex="-1">11. connect原理 <a class="header-anchor" href="#_11-connect原理" aria-label="Permalink to &quot;11. connect原理&quot;">​</a></h3><h3 id="_12-webpack介绍" tabindex="-1">12. webpack介绍 <a class="header-anchor" href="#_12-webpack介绍" aria-label="Permalink to &quot;12. webpack介绍&quot;">​</a></h3><h3 id="_13-和-的区别-什么情况下用相等" tabindex="-1">13. == 和 ===的区别，什么情况下⽤相等== <a class="header-anchor" href="#_13-和-的区别-什么情况下用相等" aria-label="Permalink to &quot;13. == 和 ===的区别，什么情况下⽤相等==&quot;">​</a></h3><h3 id="_14-bind、call、apply的区别" tabindex="-1">14. bind、call、apply的区别 <a class="header-anchor" href="#_14-bind、call、apply的区别" aria-label="Permalink to &quot;14. bind、call、apply的区别&quot;">​</a></h3><h3 id="_15-动画的了解" tabindex="-1">15. 动画的了解 <a class="header-anchor" href="#_15-动画的了解" aria-label="Permalink to &quot;15. 动画的了解&quot;">​</a></h3><h3 id="_16-介绍下原型链-解决的是继承问题吗" tabindex="-1">16. 介绍下原型链（解决的是继承问题吗） <a class="header-anchor" href="#_16-介绍下原型链-解决的是继承问题吗" aria-label="Permalink to &quot;16. 介绍下原型链（解决的是继承问题吗）&quot;">​</a></h3><h3 id="_17-对跨域的了解" tabindex="-1">17. 对跨域的了解 <a class="header-anchor" href="#_17-对跨域的了解" aria-label="Permalink to &quot;17. 对跨域的了解&quot;">​</a></h3><h3 id="五、有赞-24-问" tabindex="-1">五、有赞(24 问) <a class="header-anchor" href="#五、有赞-24-问" aria-label="Permalink to &quot;五、有赞(24 问)&quot;">​</a></h3><h3 id="_1-linux-754-介绍" tabindex="-1">1. Linux 754 介绍 <a class="header-anchor" href="#_1-linux-754-介绍" aria-label="Permalink to &quot;1. Linux 754 介绍&quot;">​</a></h3><h3 id="_2-介绍冒泡排序-选择排序-冒泡排序如何优化" tabindex="-1">2. 介绍冒泡排序，选择排序，冒泡排序如何优化 <a class="header-anchor" href="#_2-介绍冒泡排序-选择排序-冒泡排序如何优化" aria-label="Permalink to &quot;2. 介绍冒泡排序，选择排序，冒泡排序如何优化&quot;">​</a></h3><h3 id="_3-transform动画和直接使用left、top改变位置有什么优缺点" tabindex="-1">3. transform动画和直接使⽤left、top改变位置有什么优缺点 <a class="header-anchor" href="#_3-transform动画和直接使用left、top改变位置有什么优缺点" aria-label="Permalink to &quot;3. transform动画和直接使⽤left、top改变位置有什么优缺点&quot;">​</a></h3><h3 id="_4-如何判断链表是否有环" tabindex="-1">4. 如何判断链表是否有环 <a class="header-anchor" href="#_4-如何判断链表是否有环" aria-label="Permalink to &quot;4. 如何判断链表是否有环&quot;">​</a></h3><h3 id="_5-介绍二叉搜索树的特点" tabindex="-1">5. 介绍⼆叉搜索树的特点 <a class="header-anchor" href="#_5-介绍二叉搜索树的特点" aria-label="Permalink to &quot;5. 介绍⼆叉搜索树的特点&quot;">​</a></h3><h3 id="_6-介绍暂时性死区" tabindex="-1">6. 介绍暂时性死区 <a class="header-anchor" href="#_6-介绍暂时性死区" aria-label="Permalink to &quot;6. 介绍暂时性死区&quot;">​</a></h3><h3 id="_7-es6中的map和原生的对象有什么区别" tabindex="-1">7. ES6中的map和原⽣的对象有什么区别 <a class="header-anchor" href="#_7-es6中的map和原生的对象有什么区别" aria-label="Permalink to &quot;7. ES6中的map和原⽣的对象有什么区别&quot;">​</a></h3><h3 id="_8-观察者和发布-订阅的区别" tabindex="-1">8. 观察者和发布-订阅的区别 <a class="header-anchor" href="#_8-观察者和发布-订阅的区别" aria-label="Permalink to &quot;8. 观察者和发布-订阅的区别&quot;">​</a></h3><h3 id="_9-react异步渲染的概念-介绍time-slicing-和-suspense" tabindex="-1">9. react异步渲染的概念,介绍Time Slicing 和 Suspense <a class="header-anchor" href="#_9-react异步渲染的概念-介绍time-slicing-和-suspense" aria-label="Permalink to &quot;9. react异步渲染的概念,介绍Time Slicing 和 Suspense&quot;">​</a></h3><h3 id="_10-16-x声明周期的改变" tabindex="-1">10. 16.X声明周期的改变 <a class="header-anchor" href="#_10-16-x声明周期的改变" aria-label="Permalink to &quot;10. 16.X声明周期的改变&quot;">​</a></h3><h3 id="_11-16-x中props改变后在哪个生命周期中处理" tabindex="-1">11. 16.X中props改变后在哪个⽣命周期中处理 <a class="header-anchor" href="#_11-16-x中props改变后在哪个生命周期中处理" aria-label="Permalink to &quot;11. 16.X中props改变后在哪个⽣命周期中处理&quot;">​</a></h3><h3 id="_12-介绍纯函数" tabindex="-1">12. 介绍纯函数 <a class="header-anchor" href="#_12-介绍纯函数" aria-label="Permalink to &quot;12. 介绍纯函数&quot;">​</a></h3><h3 id="_13-前端性能优化" tabindex="-1">13. 前端性能优化 <a class="header-anchor" href="#_13-前端性能优化" aria-label="Permalink to &quot;13. 前端性能优化&quot;">​</a></h3><h3 id="_14-purecomponent和functioncomponent区别" tabindex="-1">14. pureComponent和FunctionComponent区别 <a class="header-anchor" href="#_14-purecomponent和functioncomponent区别" aria-label="Permalink to &quot;14. pureComponent和FunctionComponent区别&quot;">​</a></h3><h3 id="_15-介绍jsx-16-如何做rn在安卓和ios端的适配" tabindex="-1">15. 介绍JSX 16. 如何做RN在安卓和IOS端的适配 <a class="header-anchor" href="#_15-介绍jsx-16-如何做rn在安卓和ios端的适配" aria-label="Permalink to &quot;15. 介绍JSX 16. 如何做RN在安卓和IOS端的适配&quot;">​</a></h3><h3 id="_17-rn为什么能在原生中绘制成原生组件-bundle-js" tabindex="-1">17. RN为什么能在原⽣中绘制成原⽣组件（bundle.js） <a class="header-anchor" href="#_17-rn为什么能在原生中绘制成原生组件-bundle-js" aria-label="Permalink to &quot;17. RN为什么能在原⽣中绘制成原⽣组件（bundle.js）&quot;">​</a></h3><h3 id="_18-介绍虚拟dom-19-如何设计一个localstorage-保证数据的实效性" tabindex="-1">18. 介绍虚拟DOM 19. 如何设计⼀个localStorage，保证数据的实效性 <a class="header-anchor" href="#_18-介绍虚拟dom-19-如何设计一个localstorage-保证数据的实效性" aria-label="Permalink to &quot;18. 介绍虚拟DOM 19. 如何设计⼀个localStorage，保证数据的实效性&quot;">​</a></h3><h3 id="_20-如何设计promise-all" tabindex="-1">20. 如何设计Promise.all() <a class="header-anchor" href="#_20-如何设计promise-all" aria-label="Permalink to &quot;20. 如何设计Promise.all()&quot;">​</a></h3><h3 id="_21-介绍高阶组件" tabindex="-1">21. 介绍⾼阶组件 <a class="header-anchor" href="#_21-介绍高阶组件" aria-label="Permalink to &quot;21. 介绍⾼阶组件&quot;">​</a></h3><h3 id="_22-sum-2-3-实现sum-2-3-的效果" tabindex="-1">22. sum(2, 3)实现sum(2)(3)的效果 <a class="header-anchor" href="#_22-sum-2-3-实现sum-2-3-的效果" aria-label="Permalink to &quot;22. sum(2, 3)实现sum(2)(3)的效果&quot;">​</a></h3><h3 id="_23-react性能优化" tabindex="-1">23. react性能优化 <a class="header-anchor" href="#_23-react性能优化" aria-label="Permalink to &quot;23. react性能优化&quot;">​</a></h3><h3 id="_24-两个对象如何比较" tabindex="-1">24. 两个对象如何⽐较 <a class="header-anchor" href="#_24-两个对象如何比较" aria-label="Permalink to &quot;24. 两个对象如何⽐较&quot;">​</a></h3><h3 id="六、挖财-24-问" tabindex="-1">六、挖财(24 问) <a class="header-anchor" href="#六、挖财-24-问" aria-label="Permalink to &quot;六、挖财(24 问)&quot;">​</a></h3><h3 id="_1-js的原型" tabindex="-1">1. JS的原型 <a class="header-anchor" href="#_1-js的原型" aria-label="Permalink to &quot;1.  JS的原型&quot;">​</a></h3><h3 id="_2-变量作用域链" tabindex="-1">2. 变量作⽤域链 <a class="header-anchor" href="#_2-变量作用域链" aria-label="Permalink to &quot;2. 变量作⽤域链&quot;">​</a></h3><h3 id="_3-call、apply、bind的区别" tabindex="-1">3. call、apply、bind的区别 <a class="header-anchor" href="#_3-call、apply、bind的区别" aria-label="Permalink to &quot;3. call、apply、bind的区别&quot;">​</a></h3><h3 id="_4-防抖和节流的区别" tabindex="-1">4. 防抖和节流的区别 <a class="header-anchor" href="#_4-防抖和节流的区别" aria-label="Permalink to &quot;4. 防抖和节流的区别&quot;">​</a></h3><h3 id="_5-介绍各种异步方案" tabindex="-1">5. 介绍各种异步⽅案 <a class="header-anchor" href="#_5-介绍各种异步方案" aria-label="Permalink to &quot;5. 介绍各种异步⽅案&quot;">​</a></h3><h3 id="_6-react生命周期" tabindex="-1">6. react⽣命周期 <a class="header-anchor" href="#_6-react生命周期" aria-label="Permalink to &quot;6. react⽣命周期&quot;">​</a></h3><h3 id="_7-介绍fiber" tabindex="-1">7. 介绍Fiber <a class="header-anchor" href="#_7-介绍fiber" aria-label="Permalink to &quot;7. 介绍Fiber&quot;">​</a></h3><h3 id="_8-前端性能优化" tabindex="-1">8. 前端性能优化 <a class="header-anchor" href="#_8-前端性能优化" aria-label="Permalink to &quot;8. 前端性能优化&quot;">​</a></h3><h3 id="_9-介绍dom树对比" tabindex="-1">9. 介绍DOM树对⽐ <a class="header-anchor" href="#_9-介绍dom树对比" aria-label="Permalink to &quot;9. 介绍DOM树对⽐&quot;">​</a></h3><h3 id="_10-react中的key的作用" tabindex="-1">10. react中的key的作⽤ <a class="header-anchor" href="#_10-react中的key的作用" aria-label="Permalink to &quot;10. react中的key的作⽤&quot;">​</a></h3><h3 id="_11-如何设计状态树" tabindex="-1">11. 如何设计状态树 <a class="header-anchor" href="#_11-如何设计状态树" aria-label="Permalink to &quot;11. 如何设计状态树&quot;">​</a></h3><h3 id="_12-介绍css-xsrf" tabindex="-1">12. 介绍css，xsrf <a class="header-anchor" href="#_12-介绍css-xsrf" aria-label="Permalink to &quot;12. 介绍css，xsrf&quot;">​</a></h3><h3 id="_13-http缓存控制" tabindex="-1">13. http缓存控制 <a class="header-anchor" href="#_13-http缓存控制" aria-label="Permalink to &quot;13. http缓存控制&quot;">​</a></h3><h3 id="_14-项目中如何应用数据结构" tabindex="-1">14. 项⽬中如何应⽤数据结构 <a class="header-anchor" href="#_14-项目中如何应用数据结构" aria-label="Permalink to &quot;14. 项⽬中如何应⽤数据结构&quot;">​</a></h3><h3 id="_15-native提供了什么能力给rn" tabindex="-1">15. native提供了什么能⼒给RN <a class="header-anchor" href="#_15-native提供了什么能力给rn" aria-label="Permalink to &quot;15. native提供了什么能⼒给RN&quot;">​</a></h3><h3 id="_16-如何做工程上的优化" tabindex="-1">16. 如何做⼯程上的优化 <a class="header-anchor" href="#_16-如何做工程上的优化" aria-label="Permalink to &quot;16. 如何做⼯程上的优化&quot;">​</a></h3><h3 id="_17-shouldcomponentupdate是为了解决什么问题" tabindex="-1">17. shouldComponentUpdate是为了解决什么问题 <a class="header-anchor" href="#_17-shouldcomponentupdate是为了解决什么问题" aria-label="Permalink to &quot;17. shouldComponentUpdate是为了解决什么问题&quot;">​</a></h3><h3 id="_18-如何解决props层级过深的问题" tabindex="-1">18. 如何解决props层级过深的问题 <a class="header-anchor" href="#_18-如何解决props层级过深的问题" aria-label="Permalink to &quot;18. 如何解决props层级过深的问题&quot;">​</a></h3><h3 id="_19-前端怎么做单元测试" tabindex="-1">19. 前端怎么做单元测试 <a class="header-anchor" href="#_19-前端怎么做单元测试" aria-label="Permalink to &quot;19. 前端怎么做单元测试&quot;">​</a></h3><h3 id="_20-webpack生命周期" tabindex="-1">20. webpack⽣命周期 <a class="header-anchor" href="#_20-webpack生命周期" aria-label="Permalink to &quot;20. webpack⽣命周期&quot;">​</a></h3><h3 id="_21-webpack打包的整个过程" tabindex="-1">21. webpack打包的整个过程 <a class="header-anchor" href="#_21-webpack打包的整个过程" aria-label="Permalink to &quot;21. webpack打包的整个过程&quot;">​</a></h3><h3 id="_22-常用的plugins" tabindex="-1">22. 常⽤的plugins <a class="header-anchor" href="#_22-常用的plugins" aria-label="Permalink to &quot;22. 常⽤的plugins&quot;">​</a></h3><h3 id="_23-pm2怎么做进程管理-进程挂掉怎么处理" tabindex="-1">23. pm2怎么做进程管理，进程挂掉怎么处理 <a class="header-anchor" href="#_23-pm2怎么做进程管理-进程挂掉怎么处理" aria-label="Permalink to &quot;23. pm2怎么做进程管理，进程挂掉怎么处理&quot;">​</a></h3><h3 id="_24-不用pm2怎么做进程管理" tabindex="-1">24. 不⽤pm2怎么做进程管理 <a class="header-anchor" href="#_24-不用pm2怎么做进程管理" aria-label="Permalink to &quot;24. 不⽤pm2怎么做进程管理&quot;">​</a></h3><h2 id="七、泸江-23-问" tabindex="-1">七、泸江(23 问) <a class="header-anchor" href="#七、泸江-23-问" aria-label="Permalink to &quot;七、泸江(23 问)&quot;">​</a></h2><h3 id="_1-介绍下浏览器跨域" tabindex="-1">1. 介绍下浏览器跨域 <a class="header-anchor" href="#_1-介绍下浏览器跨域" aria-label="Permalink to &quot;1. 介绍下浏览器跨域&quot;">​</a></h3><h3 id="_2-怎么去解决跨域问题" tabindex="-1">2. 怎么去解决跨域问题 <a class="header-anchor" href="#_2-怎么去解决跨域问题" aria-label="Permalink to &quot;2. 怎么去解决跨域问题&quot;">​</a></h3><h3 id="_3-jsonp方案需要服务端怎么配合" tabindex="-1">3. jsonp⽅案需要服务端怎么配合 <a class="header-anchor" href="#_3-jsonp方案需要服务端怎么配合" aria-label="Permalink to &quot;3. jsonp⽅案需要服务端怎么配合&quot;">​</a></h3><h3 id="_4-ajax发生跨域要设置什么-前端" tabindex="-1">4. Ajax发⽣跨域要设置什么（前端） <a class="header-anchor" href="#_4-ajax发生跨域要设置什么-前端" aria-label="Permalink to &quot;4. Ajax发⽣跨域要设置什么（前端）&quot;">​</a></h3><h3 id="_5-加上cors之后从发起到请求正式成功的过程" tabindex="-1">5. 加上CORS之后从发起到请求正式成功的过程 <a class="header-anchor" href="#_5-加上cors之后从发起到请求正式成功的过程" aria-label="Permalink to &quot;5. 加上CORS之后从发起到请求正式成功的过程&quot;">​</a></h3><h3 id="_6-xsrf跨域攻击的安全性问题怎么防范" tabindex="-1">6. xsrf跨域攻击的安全性问题怎么防范 <a class="header-anchor" href="#_6-xsrf跨域攻击的安全性问题怎么防范" aria-label="Permalink to &quot;6. xsrf跨域攻击的安全性问题怎么防范&quot;">​</a></h3><h3 id="_7-使用async会注意哪些东⻄" tabindex="-1">7. 使⽤Async会注意哪些东⻄ <a class="header-anchor" href="#_7-使用async会注意哪些东⻄" aria-label="Permalink to &quot;7. 使⽤Async会注意哪些东⻄&quot;">​</a></h3><h3 id="_8-async里面有多个await请求-可以怎么优化-请求是否有依赖" tabindex="-1">8. Async⾥⾯有多个await请求，可以怎么优化（请求是否有依赖） <a class="header-anchor" href="#_8-async里面有多个await请求-可以怎么优化-请求是否有依赖" aria-label="Permalink to &quot;8. Async⾥⾯有多个await请求，可以怎么优化（请求是否有依赖）&quot;">​</a></h3><h3 id="_9-promise和async处理失败的时候有什么区别" tabindex="-1">9. Promise和Async处理失败的时候有什么区别 <a class="header-anchor" href="#_9-promise和async处理失败的时候有什么区别" aria-label="Permalink to &quot;9. Promise和Async处理失败的时候有什么区别&quot;">​</a></h3><h3 id="_10-redux在状态管理方面解决了react本身不能解决的问题" tabindex="-1">10. Redux在状态管理⽅⾯解决了React本身不能解决的问题 <a class="header-anchor" href="#_10-redux在状态管理方面解决了react本身不能解决的问题" aria-label="Permalink to &quot;10. Redux在状态管理⽅⾯解决了React本身不能解决的问题&quot;">​</a></h3><h3 id="_11-redux有没有做过封装" tabindex="-1">11. Redux有没有做过封装 <a class="header-anchor" href="#_11-redux有没有做过封装" aria-label="Permalink to &quot;11. Redux有没有做过封装&quot;">​</a></h3><h3 id="_12-react生命周期-常用的生命周期" tabindex="-1">12. react⽣命周期，常⽤的⽣命周期 <a class="header-anchor" href="#_12-react生命周期-常用的生命周期" aria-label="Permalink to &quot;12. react⽣命周期，常⽤的⽣命周期&quot;">​</a></h3><h3 id="_13-对应的生命周期做什么事" tabindex="-1">13. 对应的⽣命周期做什么事 <a class="header-anchor" href="#_13-对应的生命周期做什么事" aria-label="Permalink to &quot;13. 对应的⽣命周期做什么事&quot;">​</a></h3><h3 id="_14-遇到性能问题一般在哪个生命周期里解决" tabindex="-1">14. 遇到性能问题⼀般在哪个⽣命周期⾥解决 <a class="header-anchor" href="#_14-遇到性能问题一般在哪个生命周期里解决" aria-label="Permalink to &quot;14. 遇到性能问题⼀般在哪个⽣命周期⾥解决&quot;">​</a></h3><h3 id="_15-怎么做性能优化-异步加载组件" tabindex="-1">15. 怎么做性能优化（异步加载组件...） <a class="header-anchor" href="#_15-怎么做性能优化-异步加载组件" aria-label="Permalink to &quot;15. 怎么做性能优化（异步加载组件...）&quot;">​</a></h3><h3 id="_16-写react有哪些细节可以优化" tabindex="-1">16. 写react有哪些细节可以优化 <a class="header-anchor" href="#_16-写react有哪些细节可以优化" aria-label="Permalink to &quot;16. 写react有哪些细节可以优化&quot;">​</a></h3><h3 id="_17-react的事件机制-绑定一个事件到一个组件上" tabindex="-1">17. React的事件机制（绑定⼀个事件到⼀个组件上） <a class="header-anchor" href="#_17-react的事件机制-绑定一个事件到一个组件上" aria-label="Permalink to &quot;17. React的事件机制（绑定⼀个事件到⼀个组件上）&quot;">​</a></h3><h3 id="_18-介绍下事件代理-主要解决什么问题" tabindex="-1">18. 介绍下事件代理，主要解决什么问题 <a class="header-anchor" href="#_18-介绍下事件代理-主要解决什么问题" aria-label="Permalink to &quot;18. 介绍下事件代理，主要解决什么问题&quot;">​</a></h3><h3 id="_19-前端开发中用到哪些设计模式" tabindex="-1">19. 前端开发中⽤到哪些设计模式 <a class="header-anchor" href="#_19-前端开发中用到哪些设计模式" aria-label="Permalink to &quot;19. 前端开发中⽤到哪些设计模式&quot;">​</a></h3><h3 id="_20-react-redux中哪些功能用到了哪些设计模式" tabindex="-1">20. React/Redux中哪些功能⽤到了哪些设计模式 <a class="header-anchor" href="#_20-react-redux中哪些功能用到了哪些设计模式" aria-label="Permalink to &quot;20. React/Redux中哪些功能⽤到了哪些设计模式&quot;">​</a></h3><h3 id="_21-js变量类型分为几种-区别是什么" tabindex="-1">21. JS变量类型分为⼏种，区别是什么 <a class="header-anchor" href="#_21-js变量类型分为几种-区别是什么" aria-label="Permalink to &quot;21. JS变量类型分为⼏种，区别是什么&quot;">​</a></h3><h3 id="_22-js里垃圾回收机制是什么-常用的是哪种-怎么处理的" tabindex="-1">22. JS⾥垃圾回收机制是什么，常⽤的是哪种，怎么处理的 <a class="header-anchor" href="#_22-js里垃圾回收机制是什么-常用的是哪种-怎么处理的" aria-label="Permalink to &quot;22. JS⾥垃圾回收机制是什么，常⽤的是哪种，怎么处理的&quot;">​</a></h3><h3 id="_23-一般怎么组织css-webpack" tabindex="-1">23. ⼀般怎么组织CSS（Webpack） <a class="header-anchor" href="#_23-一般怎么组织css-webpack" aria-label="Permalink to &quot;23. ⼀般怎么组织CSS（Webpack）&quot;">​</a></h3><h2 id="八、饿了吗-25-问" tabindex="-1">八、饿了吗(25 问) <a class="header-anchor" href="#八、饿了吗-25-问" aria-label="Permalink to &quot;八、饿了吗(25 问)&quot;">​</a></h2><h3 id="_1-小程序里面开⻚面最多多少" tabindex="-1">1. ⼩程序⾥⾯开⻚⾯最多多少 <a class="header-anchor" href="#_1-小程序里面开⻚面最多多少" aria-label="Permalink to &quot;1. ⼩程序⾥⾯开⻚⾯最多多少&quot;">​</a></h3><h3 id="_2-react子父组件之间如何传值" tabindex="-1">2. React⼦⽗组件之间如何传值 <a class="header-anchor" href="#_2-react子父组件之间如何传值" aria-label="Permalink to &quot;2. React⼦⽗组件之间如何传值&quot;">​</a></h3><h3 id="_3-emit事件怎么发-需要引入什么" tabindex="-1">3. Emit事件怎么发，需要引⼊什么 <a class="header-anchor" href="#_3-emit事件怎么发-需要引入什么" aria-label="Permalink to &quot;3. Emit事件怎么发，需要引⼊什么&quot;">​</a></h3><h3 id="_4-介绍下react高阶组件-和普通组件有什么区别" tabindex="-1">4. 介绍下React⾼阶组件，和普通组件有什么区别 <a class="header-anchor" href="#_4-介绍下react高阶组件-和普通组件有什么区别" aria-label="Permalink to &quot;4. 介绍下React⾼阶组件，和普通组件有什么区别&quot;">​</a></h3><h3 id="_5-一个对象数组-每个子对象包含一个id和name-react如何渲染出全部的-name" tabindex="-1">5. ⼀个对象数组，每个⼦对象包含⼀个id和name，React如何渲染出全部的 name <a class="header-anchor" href="#_5-一个对象数组-每个子对象包含一个id和name-react如何渲染出全部的-name" aria-label="Permalink to &quot;5. ⼀个对象数组，每个⼦对象包含⼀个id和name，React如何渲染出全部的 name&quot;">​</a></h3><h3 id="_6-在哪个生命周期里写" tabindex="-1">6. 在哪个⽣命周期⾥写 <a class="header-anchor" href="#_6-在哪个生命周期里写" aria-label="Permalink to &quot;6. 在哪个⽣命周期⾥写&quot;">​</a></h3><h3 id="_7-其中有几个name不存在-通过异步接口获取-如何做" tabindex="-1">7. 其中有⼏个name不存在，通过异步接⼝获取，如何做 <a class="header-anchor" href="#_7-其中有几个name不存在-通过异步接口获取-如何做" aria-label="Permalink to &quot;7. 其中有⼏个name不存在，通过异步接⼝获取，如何做&quot;">​</a></h3><h3 id="_8-渲染的时候key给什么值-可以使用index吗-用id好还是index好-a-webpack如何配sass-需要配哪些loader-b-配css需要哪些loader" tabindex="-1">8. 渲染的时候key给什么值，可以使⽤index吗，⽤id好还是index好 a. webpack如何配sass，需要配哪些loader b. 配css需要哪些loader <a class="header-anchor" href="#_8-渲染的时候key给什么值-可以使用index吗-用id好还是index好-a-webpack如何配sass-需要配哪些loader-b-配css需要哪些loader" aria-label="Permalink to &quot;8. 渲染的时候key给什么值，可以使⽤index吗，⽤id好还是index好 a. webpack如何配sass，需要配哪些loader b. 配css需要哪些loader&quot;">​</a></h3><h3 id="_9-如何配置把js、css、html单独打包成一个文件" tabindex="-1">9. 如何配置把js、css、html单独打包成⼀个⽂件 <a class="header-anchor" href="#_9-如何配置把js、css、html单独打包成一个文件" aria-label="Permalink to &quot;9. 如何配置把js、css、html单独打包成⼀个⽂件&quot;">​</a></h3><h3 id="_10-div垂直水平居中-flex、绝对定位" tabindex="-1">10. div垂直⽔平居中（flex、绝对定位） <a class="header-anchor" href="#_10-div垂直水平居中-flex、绝对定位" aria-label="Permalink to &quot;10. div垂直⽔平居中（flex、绝对定位）&quot;">​</a></h3><h3 id="_11-两个元素块-一左一右-中间相距10像素" tabindex="-1">11. 两个元素块，⼀左⼀右，中间相距10像素 <a class="header-anchor" href="#_11-两个元素块-一左一右-中间相距10像素" aria-label="Permalink to &quot;11. 两个元素块，⼀左⼀右，中间相距10像素&quot;">​</a></h3><h3 id="_12-上下固定-中间滚动布局如何实现" tabindex="-1">12. 上下固定，中间滚动布局如何实现 <a class="header-anchor" href="#_12-上下固定-中间滚动布局如何实现" aria-label="Permalink to &quot;12. 上下固定，中间滚动布局如何实现&quot;">​</a></h3><h3 id="_13-1-2-3-4-5-变成-1-2-3-a-b-5" tabindex="-1">13. [1, 2, 3, 4, 5]变成[1, 2, 3, a, b, 5] <a class="header-anchor" href="#_13-1-2-3-4-5-变成-1-2-3-a-b-5" aria-label="Permalink to &quot;13. [1, 2, 3, 4, 5]变成[1, 2, 3, a, b, 5]&quot;">​</a></h3><h3 id="_14-取数组的最大值-es5、es6" tabindex="-1">14. 取数组的最⼤值（ES5、ES6） <a class="header-anchor" href="#_14-取数组的最大值-es5、es6" aria-label="Permalink to &quot;14. 取数组的最⼤值（ES5、ES6）&quot;">​</a></h3><h3 id="_15-apply和call的区别" tabindex="-1">15. apply和call的区别 <a class="header-anchor" href="#_15-apply和call的区别" aria-label="Permalink to &quot;15. apply和call的区别&quot;">​</a></h3><h3 id="_16-es5和es6有什么区别" tabindex="-1">16. ES5和ES6有什么区别 <a class="header-anchor" href="#_16-es5和es6有什么区别" aria-label="Permalink to &quot;16. ES5和ES6有什么区别&quot;">​</a></h3><h3 id="_17-some、every、find、filter、map、foreach有什么区别" tabindex="-1">17. some、every、find、filter、map、forEach有什么区别 <a class="header-anchor" href="#_17-some、every、find、filter、map、foreach有什么区别" aria-label="Permalink to &quot;17. some、every、find、filter、map、forEach有什么区别&quot;">​</a></h3><h3 id="_18-上述数组随机取数-每次返回的值都不一样" tabindex="-1">18. 上述数组随机取数，每次返回的值都不⼀样 <a class="header-anchor" href="#_18-上述数组随机取数-每次返回的值都不一样" aria-label="Permalink to &quot;18. 上述数组随机取数，每次返回的值都不⼀样&quot;">​</a></h3><h3 id="_19-如何找0-5的随机数-95-99呢" tabindex="-1">19. 如何找0-5的随机数，95-99呢 <a class="header-anchor" href="#_19-如何找0-5的随机数-95-99呢" aria-label="Permalink to &quot;19. 如何找0-5的随机数，95-99呢&quot;">​</a></h3><h3 id="_20-⻚面上有1万个button如何绑定事件" tabindex="-1">20. ⻚⾯上有1万个button如何绑定事件 <a class="header-anchor" href="#_20-⻚面上有1万个button如何绑定事件" aria-label="Permalink to &quot;20. ⻚⾯上有1万个button如何绑定事件&quot;">​</a></h3><h3 id="_21-如何判断是button" tabindex="-1">21. 如何判断是button <a class="header-anchor" href="#_21-如何判断是button" aria-label="Permalink to &quot;21. 如何判断是button&quot;">​</a></h3><h3 id="_22-⻚面上生成一万个button-并且绑定事件-如何做-js原生操作dom" tabindex="-1">22. ⻚⾯上⽣成⼀万个button，并且绑定事件，如何做（JS原⽣操作DOM） <a class="header-anchor" href="#_22-⻚面上生成一万个button-并且绑定事件-如何做-js原生操作dom" aria-label="Permalink to &quot;22. ⻚⾯上⽣成⼀万个button，并且绑定事件，如何做（JS原⽣操作DOM）&quot;">​</a></h3><h3 id="_23-循环绑定时的index是多少-为什么-怎么解决" tabindex="-1">23. 循环绑定时的index是多少，为什么，怎么解决 <a class="header-anchor" href="#_23-循环绑定时的index是多少-为什么-怎么解决" aria-label="Permalink to &quot;23. 循环绑定时的index是多少，为什么，怎么解决&quot;">​</a></h3><h3 id="_24-⻚面上有一个input-还有一个p标签-改变input后p标签就跟着变化-如何处理" tabindex="-1">24. ⻚⾯上有⼀个input，还有⼀个p标签，改变input后p标签就跟着变化， 如何处理 <a class="header-anchor" href="#_24-⻚面上有一个input-还有一个p标签-改变input后p标签就跟着变化-如何处理" aria-label="Permalink to &quot;24. ⻚⾯上有⼀个input，还有⼀个p标签，改变input后p标签就跟着变化， 如何处理&quot;">​</a></h3><h3 id="_25-监听input的哪个事件-在什么时候触发" tabindex="-1">25. 监听input的哪个事件，在什么时候触发 <a class="header-anchor" href="#_25-监听input的哪个事件-在什么时候触发" aria-label="Permalink to &quot;25. 监听input的哪个事件，在什么时候触发&quot;">​</a></h3><h2 id="九、携程-7-问" tabindex="-1">九、携程(7 问) <a class="header-anchor" href="#九、携程-7-问" aria-label="Permalink to &quot;九、携程(7 问)&quot;">​</a></h2><h3 id="_1-对react看法-有没有遇到一些坑" tabindex="-1">1. 对React看法，有没有遇到⼀些坑 <a class="header-anchor" href="#_1-对react看法-有没有遇到一些坑" aria-label="Permalink to &quot;1. 对React看法，有没有遇到⼀些坑&quot;">​</a></h3><h3 id="_2-对闭包的看法-为什么要用闭包" tabindex="-1">2. 对闭包的看法，为什么要⽤闭包 <a class="header-anchor" href="#_2-对闭包的看法-为什么要用闭包" aria-label="Permalink to &quot;2. 对闭包的看法，为什么要⽤闭包&quot;">​</a></h3><h3 id="_3-手写数组去重函数" tabindex="-1">3. ⼿写数组去重函数 <a class="header-anchor" href="#_3-手写数组去重函数" aria-label="Permalink to &quot;3. ⼿写数组去重函数&quot;">​</a></h3><h3 id="_4-手写数组扁平化函数" tabindex="-1">4. ⼿写数组扁平化函数 <a class="header-anchor" href="#_4-手写数组扁平化函数" aria-label="Permalink to &quot;4. ⼿写数组扁平化函数&quot;">​</a></h3><h3 id="_5-介绍下promise的用途和性质" tabindex="-1">5. 介绍下Promise的⽤途和性质 <a class="header-anchor" href="#_5-介绍下promise的用途和性质" aria-label="Permalink to &quot;5. 介绍下Promise的⽤途和性质&quot;">​</a></h3><h3 id="_6-promise和callback有什么区别" tabindex="-1">6. Promise和Callback有什么区别 <a class="header-anchor" href="#_6-promise和callback有什么区别" aria-label="Permalink to &quot;6. Promise和Callback有什么区别&quot;">​</a></h3><h3 id="_7-react生命周期" tabindex="-1">7. React⽣命周期 <a class="header-anchor" href="#_7-react生命周期" aria-label="Permalink to &quot;7. React⽣命周期&quot;">​</a></h3><h2 id="十、喜马拉雅-30-问" tabindex="-1">十、喜马拉雅(30 问) <a class="header-anchor" href="#十、喜马拉雅-30-问" aria-label="Permalink to &quot;十、喜马拉雅(30 问)&quot;">​</a></h2><h3 id="_1-es6新的特性" tabindex="-1">1. ES6新的特性 <a class="header-anchor" href="#_1-es6新的特性" aria-label="Permalink to &quot;1. ES6新的特性&quot;">​</a></h3><h3 id="_2-介绍promise" tabindex="-1">2. 介绍Promise <a class="header-anchor" href="#_2-介绍promise" aria-label="Permalink to &quot;2. 介绍Promise&quot;">​</a></h3><h3 id="_3-promise有几个状态" tabindex="-1">3. Promise有⼏个状态 <a class="header-anchor" href="#_3-promise有几个状态" aria-label="Permalink to &quot;3. Promise有⼏个状态&quot;">​</a></h3><h3 id="_4-说一下闭包" tabindex="-1">4. 说⼀下闭包 <a class="header-anchor" href="#_4-说一下闭包" aria-label="Permalink to &quot;4. 说⼀下闭包&quot;">​</a></h3><h3 id="_5-react的生命周期" tabindex="-1">5. React的⽣命周期 <a class="header-anchor" href="#_5-react的生命周期" aria-label="Permalink to &quot;5. React的⽣命周期&quot;">​</a></h3><h3 id="_6-componentwillreceiveprops的触发条件是什么" tabindex="-1">6. componentWillReceiveProps的触发条件是什么 <a class="header-anchor" href="#_6-componentwillreceiveprops的触发条件是什么" aria-label="Permalink to &quot;6. componentWillReceiveProps的触发条件是什么&quot;">​</a></h3><h3 id="_7-react16-3对生命周期的改变" tabindex="-1">7. React16.3对⽣命周期的改变 <a class="header-anchor" href="#_7-react16-3对生命周期的改变" aria-label="Permalink to &quot;7. React16.3对⽣命周期的改变&quot;">​</a></h3><h3 id="_8-介绍下react的filber架构" tabindex="-1">8. 介绍下React的Filber架构 <a class="header-anchor" href="#_8-介绍下react的filber架构" aria-label="Permalink to &quot;8. 介绍下React的Filber架构&quot;">​</a></h3><h3 id="_9-画filber渲染树" tabindex="-1">9. 画Filber渲染树 <a class="header-anchor" href="#_9-画filber渲染树" aria-label="Permalink to &quot;9. 画Filber渲染树&quot;">​</a></h3><h3 id="_10-介绍react高阶组件" tabindex="-1">10. 介绍React⾼阶组件 <a class="header-anchor" href="#_10-介绍react高阶组件" aria-label="Permalink to &quot;10. 介绍React⾼阶组件&quot;">​</a></h3><h3 id="_11-父子组件之间如何通信" tabindex="-1">11. ⽗⼦组件之间如何通信 <a class="header-anchor" href="#_11-父子组件之间如何通信" aria-label="Permalink to &quot;11. ⽗⼦组件之间如何通信&quot;">​</a></h3><h3 id="_12-redux怎么实现属性传递-介绍下原理" tabindex="-1">12. Redux怎么实现属性传递，介绍下原理 <a class="header-anchor" href="#_12-redux怎么实现属性传递-介绍下原理" aria-label="Permalink to &quot;12. Redux怎么实现属性传递，介绍下原理&quot;">​</a></h3><h3 id="_13-react-router版本号" tabindex="-1">13. React-Router版本号 <a class="header-anchor" href="#_13-react-router版本号" aria-label="Permalink to &quot;13. React-Router版本号&quot;">​</a></h3><h3 id="_14-网站seo怎么处理" tabindex="-1">14. ⽹站SEO怎么处理 <a class="header-anchor" href="#_14-网站seo怎么处理" aria-label="Permalink to &quot;14. ⽹站SEO怎么处理&quot;">​</a></h3><h3 id="_15-介绍下http状态码" tabindex="-1">15. 介绍下HTTP状态码 <a class="header-anchor" href="#_15-介绍下http状态码" aria-label="Permalink to &quot;15. 介绍下HTTP状态码&quot;">​</a></h3><h3 id="_16-403、301、302是什么" tabindex="-1">16. 403、301、302是什么 <a class="header-anchor" href="#_16-403、301、302是什么" aria-label="Permalink to &quot;16. 403、301、302是什么&quot;">​</a></h3><h3 id="_17-缓存相关的http请求头" tabindex="-1">17. 缓存相关的HTTP请求头 <a class="header-anchor" href="#_17-缓存相关的http请求头" aria-label="Permalink to &quot;17. 缓存相关的HTTP请求头&quot;">​</a></h3><h3 id="_18-介绍https" tabindex="-1">18. 介绍HTTPS <a class="header-anchor" href="#_18-介绍https" aria-label="Permalink to &quot;18. 介绍HTTPS&quot;">​</a></h3><h3 id="_19-https怎么建立安全通道" tabindex="-1">19. HTTPS怎么建⽴安全通道 <a class="header-anchor" href="#_19-https怎么建立安全通道" aria-label="Permalink to &quot;19. HTTPS怎么建⽴安全通道&quot;">​</a></h3><h3 id="_20-前端性能优化-js原生和react" tabindex="-1">20. 前端性能优化（JS原⽣和React） <a class="header-anchor" href="#_20-前端性能优化-js原生和react" aria-label="Permalink to &quot;20. 前端性能优化（JS原⽣和React）&quot;">​</a></h3><h3 id="_21-用户体验做过什么优化" tabindex="-1">21. ⽤户体验做过什么优化 <a class="header-anchor" href="#_21-用户体验做过什么优化" aria-label="Permalink to &quot;21. ⽤户体验做过什么优化&quot;">​</a></h3><h3 id="_22-对pwa有什么了解" tabindex="-1">22. 对PWA有什么了解 <a class="header-anchor" href="#_22-对pwa有什么了解" aria-label="Permalink to &quot;22. 对PWA有什么了解&quot;">​</a></h3><h3 id="_23-对安全有什么了解" tabindex="-1">23. 对安全有什么了解 <a class="header-anchor" href="#_23-对安全有什么了解" aria-label="Permalink to &quot;23. 对安全有什么了解&quot;">​</a></h3><h3 id="_24-介绍下数字签名的原理" tabindex="-1">24. 介绍下数字签名的原理 <a class="header-anchor" href="#_24-介绍下数字签名的原理" aria-label="Permalink to &quot;24. 介绍下数字签名的原理&quot;">​</a></h3><h3 id="_25-前后端通信使用什么方案" tabindex="-1">25. 前后端通信使⽤什么⽅案 <a class="header-anchor" href="#_25-前后端通信使用什么方案" aria-label="Permalink to &quot;25. 前后端通信使⽤什么⽅案&quot;">​</a></h3><h3 id="_26-restful常用的method" tabindex="-1">26. RESTful常⽤的Method <a class="header-anchor" href="#_26-restful常用的method" aria-label="Permalink to &quot;26. RESTful常⽤的Method&quot;">​</a></h3><h3 id="_27-介绍下跨域" tabindex="-1">27. 介绍下跨域 <a class="header-anchor" href="#_27-介绍下跨域" aria-label="Permalink to &quot;27. 介绍下跨域&quot;">​</a></h3><h3 id="_28-access-control-allow-origin在服务端哪里配置" tabindex="-1">28. Access-Control-Allow-Origin在服务端哪⾥配置 <a class="header-anchor" href="#_28-access-control-allow-origin在服务端哪里配置" aria-label="Permalink to &quot;28. Access-Control-Allow-Origin在服务端哪⾥配置&quot;">​</a></h3><h3 id="_29-csrf跨站攻击怎么解决" tabindex="-1">29. csrf跨站攻击怎么解决 <a class="header-anchor" href="#_29-csrf跨站攻击怎么解决" aria-label="Permalink to &quot;29. csrf跨站攻击怎么解决&quot;">​</a></h3><h3 id="_30-前端和后端怎么联调" tabindex="-1">30. 前端和后端怎么联调 <a class="header-anchor" href="#_30-前端和后端怎么联调" aria-label="Permalink to &quot;30. 前端和后端怎么联调&quot;">​</a></h3><h2 id="十一、兑吧-33-问" tabindex="-1">十一、兑吧(33 问) <a class="header-anchor" href="#十一、兑吧-33-问" aria-label="Permalink to &quot;十一、兑吧(33 问)&quot;">​</a></h2><h3 id="_1-localstorage和cookie有什么区别" tabindex="-1">1. localStorage和cookie有什么区别 <a class="header-anchor" href="#_1-localstorage和cookie有什么区别" aria-label="Permalink to &quot;1. localStorage和cookie有什么区别&quot;">​</a></h3><h3 id="_2-css选择器有哪些" tabindex="-1">2. CSS选择器有哪些 <a class="header-anchor" href="#_2-css选择器有哪些" aria-label="Permalink to &quot;2. CSS选择器有哪些&quot;">​</a></h3><h3 id="_3-盒子模型-以及标准情况和ie下的区别" tabindex="-1">3. 盒⼦模型，以及标准情况和IE下的区别 <a class="header-anchor" href="#_3-盒子模型-以及标准情况和ie下的区别" aria-label="Permalink to &quot;3. 盒⼦模型，以及标准情况和IE下的区别&quot;">​</a></h3><h3 id="_4-如何实现高度自适应" tabindex="-1">4. 如何实现⾼度⾃适应 <a class="header-anchor" href="#_4-如何实现高度自适应" aria-label="Permalink to &quot;4. 如何实现⾼度⾃适应&quot;">​</a></h3><h3 id="_5-prototype和-proto-区别" tabindex="-1">5. prototype和__proto__区别 <a class="header-anchor" href="#_5-prototype和-proto-区别" aria-label="Permalink to &quot;5. prototype和\\_\\_proto\\_\\_区别&quot;">​</a></h3><h3 id="_6-construct是什么" tabindex="-1">6. _construct是什么 <a class="header-anchor" href="#_6-construct是什么" aria-label="Permalink to &quot;6. _construct是什么&quot;">​</a></h3><h3 id="_7-new是怎么实现的" tabindex="-1">7. new是怎么实现的 <a class="header-anchor" href="#_7-new是怎么实现的" aria-label="Permalink to &quot;7. new是怎么实现的&quot;">​</a></h3><h3 id="_8-promise的精髓-以及优缺点" tabindex="-1">8. promise的精髓，以及优缺点 <a class="header-anchor" href="#_8-promise的精髓-以及优缺点" aria-label="Permalink to &quot;8. promise的精髓，以及优缺点&quot;">​</a></h3><h3 id="_9-如何实现h5手机端的适配" tabindex="-1">9. 如何实现H5⼿机端的适配 <a class="header-anchor" href="#_9-如何实现h5手机端的适配" aria-label="Permalink to &quot;9. 如何实现H5⼿机端的适配&quot;">​</a></h3><h3 id="_10-rem、flex的区别-root-em" tabindex="-1">10. rem、flex的区别（root em） <a class="header-anchor" href="#_10-rem、flex的区别-root-em" aria-label="Permalink to &quot;10. rem、flex的区别（root em）&quot;">​</a></h3><h3 id="_11-em和px的区别" tabindex="-1">11. em和px的区别 <a class="header-anchor" href="#_11-em和px的区别" aria-label="Permalink to &quot;11. em和px的区别&quot;">​</a></h3><h3 id="_12-react生命周期" tabindex="-1">12. React生命周期 <a class="header-anchor" href="#_12-react生命周期" aria-label="Permalink to &quot;12. React生命周期&quot;">​</a></h3><h3 id="_13-如何去除url中的-号" tabindex="-1">13. 如何去除url中的#号 <a class="header-anchor" href="#_13-如何去除url中的-号" aria-label="Permalink to &quot;13. 如何去除url中的#号&quot;">​</a></h3><h3 id="_14-redux状态管理器和变量挂载到window中有什么区别" tabindex="-1">14. Redux状态管理器和变量挂载到window中有什么区别 <a class="header-anchor" href="#_14-redux状态管理器和变量挂载到window中有什么区别" aria-label="Permalink to &quot;14. Redux状态管理器和变量挂载到window中有什么区别&quot;">​</a></h3><h3 id="_15-webpack和gulp的优缺点" tabindex="-1">15. webpack和gulp的优缺点 <a class="header-anchor" href="#_15-webpack和gulp的优缺点" aria-label="Permalink to &quot;15. webpack和gulp的优缺点&quot;">​</a></h3><h3 id="_16-如何实现异步加载" tabindex="-1">16. 如何实现异步加载 <a class="header-anchor" href="#_16-如何实现异步加载" aria-label="Permalink to &quot;16. 如何实现异步加载&quot;">​</a></h3><h3 id="_17-如何实现分模块打包-多入口" tabindex="-1">17. 如何实现分模块打包（多⼊⼝） <a class="header-anchor" href="#_17-如何实现分模块打包-多入口" aria-label="Permalink to &quot;17. 如何实现分模块打包（多⼊⼝）&quot;">​</a></h3><h3 id="_18-前端性能优化-1js-css-2-图片-3-缓存预加载-4-ssr-5-多域名加-载-6-负载均衡" tabindex="-1">18. 前端性能优化（1js css；2 图⽚；3 缓存预加载； 4 SSR； 5 多域名加 载；6 负载均衡） <a class="header-anchor" href="#_18-前端性能优化-1js-css-2-图片-3-缓存预加载-4-ssr-5-多域名加-载-6-负载均衡" aria-label="Permalink to &quot;18. 前端性能优化（1js css；2 图⽚；3 缓存预加载； 4 SSR； 5 多域名加 载；6 负载均衡）&quot;">​</a></h3><h3 id="_19-并发请求资源数上限-6个" tabindex="-1">19. 并发请求资源数上限（6个） <a class="header-anchor" href="#_19-并发请求资源数上限-6个" aria-label="Permalink to &quot;19. 并发请求资源数上限（6个）&quot;">​</a></h3><h3 id="_20-base64为什么能提升性能-缺点" tabindex="-1">20. base64为什么能提升性能，缺点 <a class="header-anchor" href="#_20-base64为什么能提升性能-缺点" aria-label="Permalink to &quot;20. base64为什么能提升性能，缺点&quot;">​</a></h3><h3 id="_21-介绍webp这个图片文件格式" tabindex="-1">21. 介绍webp这个图⽚⽂件格式 <a class="header-anchor" href="#_21-介绍webp这个图片文件格式" aria-label="Permalink to &quot;21. 介绍webp这个图⽚⽂件格式&quot;">​</a></h3><h3 id="_22-介绍koa2" tabindex="-1">22. 介绍koa2 <a class="header-anchor" href="#_22-介绍koa2" aria-label="Permalink to &quot;22. 介绍koa2&quot;">​</a></h3><h3 id="_23-promise如何实现的" tabindex="-1">23. Promise如何实现的 <a class="header-anchor" href="#_23-promise如何实现的" aria-label="Permalink to &quot;23. Promise如何实现的&quot;">​</a></h3><h3 id="_24-异步请求-低版本fetch如何低版本适配" tabindex="-1">24. 异步请求，低版本fetch如何低版本适配 <a class="header-anchor" href="#_24-异步请求-低版本fetch如何低版本适配" aria-label="Permalink to &quot;24. 异步请求，低版本fetch如何低版本适配&quot;">​</a></h3><h3 id="_25-ajax如何处理跨域" tabindex="-1">25. ajax如何处理跨域 <a class="header-anchor" href="#_25-ajax如何处理跨域" aria-label="Permalink to &quot;25. ajax如何处理跨域&quot;">​</a></h3><h3 id="_26-cors如何设置" tabindex="-1">26. CORS如何设置 <a class="header-anchor" href="#_26-cors如何设置" aria-label="Permalink to &quot;26. CORS如何设置&quot;">​</a></h3><h3 id="_27-jsonp为什么不支持post方法" tabindex="-1">27. jsonp为什么不⽀持post⽅法 <a class="header-anchor" href="#_27-jsonp为什么不支持post方法" aria-label="Permalink to &quot;27. jsonp为什么不⽀持post⽅法&quot;">​</a></h3><h3 id="_28-介绍同源策略" tabindex="-1">28. 介绍同源策略 <a class="header-anchor" href="#_28-介绍同源策略" aria-label="Permalink to &quot;28. 介绍同源策略&quot;">​</a></h3><h3 id="_29-react使用过的一些组件" tabindex="-1">29. React使⽤过的⼀些组件 <a class="header-anchor" href="#_29-react使用过的一些组件" aria-label="Permalink to &quot;29. React使⽤过的⼀些组件&quot;">​</a></h3><h3 id="_30-介绍immuable" tabindex="-1">30. 介绍Immuable <a class="header-anchor" href="#_30-介绍immuable" aria-label="Permalink to &quot;30. 介绍Immuable&quot;">​</a></h3><h3 id="_31-介绍下redux整个流程原理" tabindex="-1">31. 介绍下redux整个流程原理 <a class="header-anchor" href="#_31-介绍下redux整个流程原理" aria-label="Permalink to &quot;31. 介绍下redux整个流程原理&quot;">​</a></h3><h3 id="_32-介绍原型链" tabindex="-1">32. 介绍原型链 <a class="header-anchor" href="#_32-介绍原型链" aria-label="Permalink to &quot;32. 介绍原型链&quot;">​</a></h3><h3 id="_33-如何继承" tabindex="-1">33. 如何继承 <a class="header-anchor" href="#_33-如何继承" aria-label="Permalink to &quot;33. 如何继承&quot;">​</a></h3><h2 id="十二、微医-40-问" tabindex="-1">十二、微医(40 问) <a class="header-anchor" href="#十二、微医-40-问" aria-label="Permalink to &quot;十二、微医(40 问)&quot;">​</a></h2><h3 id="_1-介绍js数据类型-基本数据类型和引用数据类型的区别" tabindex="-1">1. 介绍JS数据类型，基本数据类型和引⽤数据类型的区别 <a class="header-anchor" href="#_1-介绍js数据类型-基本数据类型和引用数据类型的区别" aria-label="Permalink to &quot;1. 介绍JS数据类型，基本数据类型和引⽤数据类型的区别&quot;">​</a></h3><h3 id="_2-array是object类型吗" tabindex="-1">2. Array是Object类型吗 <a class="header-anchor" href="#_2-array是object类型吗" aria-label="Permalink to &quot;2. Array是Object类型吗&quot;">​</a></h3><h3 id="_3-数据类型分别存在哪里" tabindex="-1">3. 数据类型分别存在哪⾥ <a class="header-anchor" href="#_3-数据类型分别存在哪里" aria-label="Permalink to &quot;3. 数据类型分别存在哪⾥&quot;">​</a></h3><blockquote><p>a. var a = {name: &quot;前端开发&quot;};</p><p>var b = a;</p><p>a = null那么b 输出什么</p><p>b. var a = {b: 1}存放在哪⾥</p><p>c. var a = {b: {c: 1}}存放在哪⾥</p></blockquote><h3 id="_4-栈和堆的区别" tabindex="-1">4. 栈和堆的区别 <a class="header-anchor" href="#_4-栈和堆的区别" aria-label="Permalink to &quot;4. 栈和堆的区别&quot;">​</a></h3><h3 id="_5-垃圾回收时栈和堆的区别" tabindex="-1">5. 垃圾回收时栈和堆的区别 <a class="header-anchor" href="#_5-垃圾回收时栈和堆的区别" aria-label="Permalink to &quot;5. 垃圾回收时栈和堆的区别&quot;">​</a></h3><h3 id="_6-数组里面有10万个数据-取第一个元素和第10万个元素的时间相差多少" tabindex="-1">6. 数组⾥⾯有10万个数据，取第⼀个元素和第10万个元素的时间相差多少 <a class="header-anchor" href="#_6-数组里面有10万个数据-取第一个元素和第10万个元素的时间相差多少" aria-label="Permalink to &quot;6. 数组⾥⾯有10万个数据，取第⼀个元素和第10万个元素的时间相差多少&quot;">​</a></h3><h3 id="_7-栈和堆具体怎么存储" tabindex="-1">7. 栈和堆具体怎么存储 <a class="header-anchor" href="#_7-栈和堆具体怎么存储" aria-label="Permalink to &quot;7. 栈和堆具体怎么存储&quot;">​</a></h3><h3 id="_8-介绍闭包以及闭包为什么没清除" tabindex="-1">8. 介绍闭包以及闭包为什么没清除 <a class="header-anchor" href="#_8-介绍闭包以及闭包为什么没清除" aria-label="Permalink to &quot;8. 介绍闭包以及闭包为什么没清除&quot;">​</a></h3><h3 id="_9-闭包的使用场景" tabindex="-1">9. 闭包的使⽤场景 <a class="header-anchor" href="#_9-闭包的使用场景" aria-label="Permalink to &quot;9. 闭包的使⽤场景&quot;">​</a></h3><h3 id="_10-js怎么实现异步" tabindex="-1">10. JS怎么实现异步 <a class="header-anchor" href="#_10-js怎么实现异步" aria-label="Permalink to &quot;10. JS怎么实现异步&quot;">​</a></h3><h3 id="_11-异步整个执行周期" tabindex="-1">11. 异步整个执⾏周期 <a class="header-anchor" href="#_11-异步整个执行周期" aria-label="Permalink to &quot;11. 异步整个执⾏周期&quot;">​</a></h3><h3 id="_12-promise的三种状态" tabindex="-1">12. Promise的三种状态 <a class="header-anchor" href="#_12-promise的三种状态" aria-label="Permalink to &quot;12. Promise的三种状态&quot;">​</a></h3><h3 id="_13-async-await怎么实现" tabindex="-1">13. Async/Await怎么实现 <a class="header-anchor" href="#_13-async-await怎么实现" aria-label="Permalink to &quot;13. Async/Await怎么实现&quot;">​</a></h3><h3 id="_14-promise和settimeout执行先后的区别" tabindex="-1">14. Promise和setTimeout执⾏先后的区别 <a class="header-anchor" href="#_14-promise和settimeout执行先后的区别" aria-label="Permalink to &quot;14. Promise和setTimeout执⾏先后的区别&quot;">​</a></h3><h3 id="_15-js为什么要区分微任务和宏任务" tabindex="-1">15. JS为什么要区分微任务和宏任务 <a class="header-anchor" href="#_15-js为什么要区分微任务和宏任务" aria-label="Permalink to &quot;15. JS为什么要区分微任务和宏任务&quot;">​</a></h3><h3 id="_16-promise构造函数是同步还是异步执行-then呢" tabindex="-1">16. Promise构造函数是同步还是异步执⾏，then呢 <a class="header-anchor" href="#_16-promise构造函数是同步还是异步执行-then呢" aria-label="Permalink to &quot;16. Promise构造函数是同步还是异步执⾏，then呢&quot;">​</a></h3><h3 id="_17-发布-订阅和观察者模式的区别" tabindex="-1">17. 发布-订阅和观察者模式的区别 <a class="header-anchor" href="#_17-发布-订阅和观察者模式的区别" aria-label="Permalink to &quot;17. 发布-订阅和观察者模式的区别&quot;">​</a></h3><h3 id="_18-js执行过程中分为哪些阶段" tabindex="-1">18. JS执⾏过程中分为哪些阶段 <a class="header-anchor" href="#_18-js执行过程中分为哪些阶段" aria-label="Permalink to &quot;18. JS执⾏过程中分为哪些阶段&quot;">​</a></h3><h3 id="_19-词法作用域和this的区别" tabindex="-1">19. 词法作⽤域和this的区别 <a class="header-anchor" href="#_19-词法作用域和this的区别" aria-label="Permalink to &quot;19. 词法作⽤域和this的区别&quot;">​</a></h3><h3 id="_20-平常是怎么做继承" tabindex="-1">20. 平常是怎么做继承 <a class="header-anchor" href="#_20-平常是怎么做继承" aria-label="Permalink to &quot;20. 平常是怎么做继承&quot;">​</a></h3><h3 id="_21-深拷⻉和浅拷⻉" tabindex="-1">21. 深拷⻉和浅拷⻉ <a class="header-anchor" href="#_21-深拷⻉和浅拷⻉" aria-label="Permalink to &quot;21. 深拷⻉和浅拷⻉&quot;">​</a></h3><h3 id="_22-loadsh深拷⻉实现原理" tabindex="-1">22. loadsh深拷⻉实现原理 <a class="header-anchor" href="#_22-loadsh深拷⻉实现原理" aria-label="Permalink to &quot;22. loadsh深拷⻉实现原理&quot;">​</a></h3><h3 id="_23-es6中let块作用域是怎么实现的" tabindex="-1">23. ES6中let块作⽤域是怎么实现的 <a class="header-anchor" href="#_23-es6中let块作用域是怎么实现的" aria-label="Permalink to &quot;23. ES6中let块作⽤域是怎么实现的&quot;">​</a></h3><h3 id="_24-react中setstate后发生了什么-a-setstate为什么默认是异步-b-setstate什么时候是同步的" tabindex="-1">24. React中setState后发⽣了什么 a. setState为什么默认是异步 b. setState什么时候是同步的 <a class="header-anchor" href="#_24-react中setstate后发生了什么-a-setstate为什么默认是异步-b-setstate什么时候是同步的" aria-label="Permalink to &quot;24. React中setState后发⽣了什么 a. setState为什么默认是异步 b. setState什么时候是同步的&quot;">​</a></h3><h3 id="_25-为什么3大框架出现以后就出现很多native-rn-框架-虚拟dom" tabindex="-1">25. 为什么3⼤框架出现以后就出现很多native（RN）框架（虚拟DOM） <a class="header-anchor" href="#_25-为什么3大框架出现以后就出现很多native-rn-框架-虚拟dom" aria-label="Permalink to &quot;25. 为什么3⼤框架出现以后就出现很多native（RN）框架（虚拟DOM）&quot;">​</a></h3><h3 id="_26-虚拟dom主要做了什么" tabindex="-1">26. 虚拟DOM主要做了什么 <a class="header-anchor" href="#_26-虚拟dom主要做了什么" aria-label="Permalink to &quot;26. 虚拟DOM主要做了什么&quot;">​</a></h3><h3 id="_27-虚拟dom本身是什么-js对象" tabindex="-1">27. 虚拟DOM本身是什么（JS对象） <a class="header-anchor" href="#_27-虚拟dom本身是什么-js对象" aria-label="Permalink to &quot;27. 虚拟DOM本身是什么（JS对象）&quot;">​</a></h3><h3 id="_28-304是什么" tabindex="-1">28. 304是什么 <a class="header-anchor" href="#_28-304是什么" aria-label="Permalink to &quot;28. 304是什么&quot;">​</a></h3><h3 id="_29-打包时hash码是怎么生成的" tabindex="-1">29. 打包时Hash码是怎么⽣成的 <a class="header-anchor" href="#_29-打包时hash码是怎么生成的" aria-label="Permalink to &quot;29. 打包时Hash码是怎么⽣成的&quot;">​</a></h3><h3 id="_30-随机值存在一样的情况-如何避免" tabindex="-1">30. 随机值存在⼀样的情况，如何避免 <a class="header-anchor" href="#_30-随机值存在一样的情况-如何避免" aria-label="Permalink to &quot;30. 随机值存在⼀样的情况，如何避免&quot;">​</a></h3><h3 id="_31-使用webpack构建时有无做一些自定义操作" tabindex="-1">31. 使⽤webpack构建时有⽆做⼀些⾃定义操作 <a class="header-anchor" href="#_31-使用webpack构建时有无做一些自定义操作" aria-label="Permalink to &quot;31. 使⽤webpack构建时有⽆做⼀些⾃定义操作&quot;">​</a></h3><h3 id="_32-webpack做了什么" tabindex="-1">32. webpack做了什么 <a class="header-anchor" href="#_32-webpack做了什么" aria-label="Permalink to &quot;32. webpack做了什么&quot;">​</a></h3><h3 id="_33-a-b两个按钮-点击aba-返回顺序可能是baa-如何保证是-aba-promise-then" tabindex="-1">33. a，b两个按钮，点击aba，返回顺序可能是baa，如何保证是 aba（Promise.then） <a class="header-anchor" href="#_33-a-b两个按钮-点击aba-返回顺序可能是baa-如何保证是-aba-promise-then" aria-label="Permalink to &quot;33. a，b两个按钮，点击aba，返回顺序可能是baa，如何保证是 aba（Promise.then）&quot;">​</a></h3><blockquote><p>a. node接⼝转发有⽆做什么优化</p><p>b. node起服务如何保证稳定性，平缓降级，重启等</p></blockquote><h3 id="_34-rn有没有做热加载" tabindex="-1">34. RN有没有做热加载 <a class="header-anchor" href="#_34-rn有没有做热加载" aria-label="Permalink to &quot;34. RN有没有做热加载&quot;">​</a></h3><h3 id="_35-rn遇到的兼容性问题" tabindex="-1">35. RN遇到的兼容性问题 <a class="header-anchor" href="#_35-rn遇到的兼容性问题" aria-label="Permalink to &quot;35. RN遇到的兼容性问题&quot;">​</a></h3><h3 id="_36-rn如何实现一个原生的组件" tabindex="-1">36. RN如何实现⼀个原⽣的组件 <a class="header-anchor" href="#_36-rn如何实现一个原生的组件" aria-label="Permalink to &quot;36. RN如何实现⼀个原⽣的组件&quot;">​</a></h3><h3 id="_37-rn混原生和原生混rn有什么不同" tabindex="-1">37. RN混原⽣和原⽣混RN有什么不同 <a class="header-anchor" href="#_37-rn混原生和原生混rn有什么不同" aria-label="Permalink to &quot;37. RN混原⽣和原⽣混RN有什么不同&quot;">​</a></h3><h3 id="_38-什么是单⻚项目" tabindex="-1">38. 什么是单⻚项⽬ <a class="header-anchor" href="#_38-什么是单⻚项目" aria-label="Permalink to &quot;38. 什么是单⻚项⽬&quot;">​</a></h3><h3 id="_39-遇到的复杂业务场景" tabindex="-1">39. 遇到的复杂业务场景 <a class="header-anchor" href="#_39-遇到的复杂业务场景" aria-label="Permalink to &quot;39. 遇到的复杂业务场景&quot;">​</a></h3><h3 id="_40-promise-all实现原理" tabindex="-1">40. Promise.all实现原理 <a class="header-anchor" href="#_40-promise-all实现原理" aria-label="Permalink to &quot;40. Promise.all实现原理&quot;">​</a></h3><h2 id="十三、寺库-20-问" tabindex="-1">十三、寺库(20 问) <a class="header-anchor" href="#十三、寺库-20-问" aria-label="Permalink to &quot;十三、寺库(20 问)&quot;">​</a></h2><h3 id="_1-介绍promise的特性-优缺点" tabindex="-1">1. 介绍Promise的特性，优缺点 <a class="header-anchor" href="#_1-介绍promise的特性-优缺点" aria-label="Permalink to &quot;1. 介绍Promise的特性，优缺点&quot;">​</a></h3><h3 id="_2-介绍redux" tabindex="-1">2. 介绍Redux <a class="header-anchor" href="#_2-介绍redux" aria-label="Permalink to &quot;2. 介绍Redux&quot;">​</a></h3><h3 id="_3-rn的原理-为什么可以同时在安卓和ios端运行" tabindex="-1">3. RN的原理，为什么可以同时在安卓和IOS端运⾏ <a class="header-anchor" href="#_3-rn的原理-为什么可以同时在安卓和ios端运行" aria-label="Permalink to &quot;3. RN的原理，为什么可以同时在安卓和IOS端运⾏&quot;">​</a></h3><h3 id="_4-rn如何调用原生的一些功能" tabindex="-1">4. RN如何调⽤原⽣的⼀些功能 <a class="header-anchor" href="#_4-rn如何调用原生的一些功能" aria-label="Permalink to &quot;4. RN如何调⽤原⽣的⼀些功能&quot;">​</a></h3><h3 id="_5-介绍rn的缺点" tabindex="-1">5. 介绍RN的缺点 <a class="header-anchor" href="#_5-介绍rn的缺点" aria-label="Permalink to &quot;5. 介绍RN的缺点&quot;">​</a></h3><h3 id="_6-介绍排序算法和快排原理" tabindex="-1">6. 介绍排序算法和快排原理 <a class="header-anchor" href="#_6-介绍排序算法和快排原理" aria-label="Permalink to &quot;6. 介绍排序算法和快排原理&quot;">​</a></h3><h3 id="_7-堆和栈的区别" tabindex="-1">7. 堆和栈的区别 <a class="header-anchor" href="#_7-堆和栈的区别" aria-label="Permalink to &quot;7. 堆和栈的区别&quot;">​</a></h3><h3 id="_8-介绍闭包" tabindex="-1">8. 介绍闭包 <a class="header-anchor" href="#_8-介绍闭包" aria-label="Permalink to &quot;8. 介绍闭包&quot;">​</a></h3><h3 id="_9-闭包的核心是什么" tabindex="-1">9. 闭包的核⼼是什么 <a class="header-anchor" href="#_9-闭包的核心是什么" aria-label="Permalink to &quot;9. 闭包的核⼼是什么&quot;">​</a></h3><h3 id="_10-网络的五层模型" tabindex="-1">10. ⽹络的五层模型 <a class="header-anchor" href="#_10-网络的五层模型" aria-label="Permalink to &quot;10. ⽹络的五层模型&quot;">​</a></h3><h3 id="_11-http和https的区别" tabindex="-1">11. HTTP和HTTPS的区别 <a class="header-anchor" href="#_11-http和https的区别" aria-label="Permalink to &quot;11. HTTP和HTTPS的区别&quot;">​</a></h3><h3 id="_12-https的加密过程" tabindex="-1">12. HTTPS的加密过程 <a class="header-anchor" href="#_12-https的加密过程" aria-label="Permalink to &quot;12. HTTPS的加密过程&quot;">​</a></h3><h3 id="_13-介绍ssl和tls" tabindex="-1">13. 介绍SSL和TLS <a class="header-anchor" href="#_13-介绍ssl和tls" aria-label="Permalink to &quot;13. 介绍SSL和TLS&quot;">​</a></h3><h3 id="_14-介绍dns解析" tabindex="-1">14. 介绍DNS解析 <a class="header-anchor" href="#_14-介绍dns解析" aria-label="Permalink to &quot;14. 介绍DNS解析&quot;">​</a></h3><h3 id="_15-js的继承方法" tabindex="-1">15. JS的继承⽅法 <a class="header-anchor" href="#_15-js的继承方法" aria-label="Permalink to &quot;15. JS的继承⽅法&quot;">​</a></h3><h3 id="_16-介绍垃圾回收" tabindex="-1">16. 介绍垃圾回收 <a class="header-anchor" href="#_16-介绍垃圾回收" aria-label="Permalink to &quot;16. 介绍垃圾回收&quot;">​</a></h3><h3 id="_17-cookie的引用为了解决什么问题" tabindex="-1">17. cookie的引⽤为了解决什么问题 <a class="header-anchor" href="#_17-cookie的引用为了解决什么问题" aria-label="Permalink to &quot;17. cookie的引⽤为了解决什么问题&quot;">​</a></h3><h3 id="_18-cookie和localstorage的区别" tabindex="-1">18. cookie和localStorage的区别 <a class="header-anchor" href="#_18-cookie和localstorage的区别" aria-label="Permalink to &quot;18. cookie和localStorage的区别&quot;">​</a></h3><h3 id="_19-如何解决跨域问题" tabindex="-1">19. 如何解决跨域问题 <a class="header-anchor" href="#_19-如何解决跨域问题" aria-label="Permalink to &quot;19. 如何解决跨域问题&quot;">​</a></h3><h3 id="_20-前端性能优化" tabindex="-1">20. 前端性能优化 <a class="header-anchor" href="#_20-前端性能优化" aria-label="Permalink to &quot;20. 前端性能优化&quot;">​</a></h3><h2 id="十四、宝宝树-15-问" tabindex="-1">十四、宝宝树(15 问) <a class="header-anchor" href="#十四、宝宝树-15-问" aria-label="Permalink to &quot;十四、宝宝树(15 问)&quot;">​</a></h2><h3 id="_1-使用canvas绘图时如何组织成通用组件" tabindex="-1">1. 使⽤canvas绘图时如何组织成通⽤组件 <a class="header-anchor" href="#_1-使用canvas绘图时如何组织成通用组件" aria-label="Permalink to &quot;1. 使⽤canvas绘图时如何组织成通⽤组件&quot;">​</a></h3><h3 id="_2-formdata和原生的ajax有什么区别" tabindex="-1">2. formData和原⽣的ajax有什么区别 <a class="header-anchor" href="#_2-formdata和原生的ajax有什么区别" aria-label="Permalink to &quot;2. formData和原⽣的ajax有什么区别&quot;">​</a></h3><h3 id="_3-介绍下表单提交-和formdata有什么关系" tabindex="-1">3. 介绍下表单提交，和formData有什么关系 <a class="header-anchor" href="#_3-介绍下表单提交-和formdata有什么关系" aria-label="Permalink to &quot;3. 介绍下表单提交，和formData有什么关系&quot;">​</a></h3><h3 id="_4-介绍redux接入流程" tabindex="-1">4. 介绍redux接⼊流程 <a class="header-anchor" href="#_4-介绍redux接入流程" aria-label="Permalink to &quot;4. 介绍redux接⼊流程&quot;">​</a></h3><h3 id="_5-rudux和全局管理有什么区别-数据可控、数据响应" tabindex="-1">5. rudux和全局管理有什么区别（数据可控、数据响应） <a class="header-anchor" href="#_5-rudux和全局管理有什么区别-数据可控、数据响应" aria-label="Permalink to &quot;5. rudux和全局管理有什么区别（数据可控、数据响应）&quot;">​</a></h3><h3 id="_6-rn和原生通信-7-介绍mvp怎么组织" tabindex="-1">6. RN和原⽣通信 7. 介绍MVP怎么组织 <a class="header-anchor" href="#_6-rn和原生通信-7-介绍mvp怎么组织" aria-label="Permalink to &quot;6. RN和原⽣通信 7. 介绍MVP怎么组织&quot;">​</a></h3><h3 id="_8-介绍异步方案" tabindex="-1">8. 介绍异步⽅案 <a class="header-anchor" href="#_8-介绍异步方案" aria-label="Permalink to &quot;8. 介绍异步⽅案&quot;">​</a></h3><h3 id="_9-promise如何实现then处理" tabindex="-1">9. promise如何实现then处理 <a class="header-anchor" href="#_9-promise如何实现then处理" aria-label="Permalink to &quot;9. promise如何实现then处理&quot;">​</a></h3><h3 id="_10-koa2中间件原理" tabindex="-1">10. koa2中间件原理 <a class="header-anchor" href="#_10-koa2中间件原理" aria-label="Permalink to &quot;10. koa2中间件原理&quot;">​</a></h3><h3 id="_11-常用的中间件" tabindex="-1">11. 常⽤的中间件 <a class="header-anchor" href="#_11-常用的中间件" aria-label="Permalink to &quot;11. 常⽤的中间件&quot;">​</a></h3><h3 id="_12-服务端怎么做统一的状态处理" tabindex="-1">12. 服务端怎么做统⼀的状态处理 <a class="header-anchor" href="#_12-服务端怎么做统一的状态处理" aria-label="Permalink to &quot;12. 服务端怎么做统⼀的状态处理&quot;">​</a></h3><h3 id="_13-如何对相对路径引用进行优化" tabindex="-1">13. 如何对相对路径引⽤进⾏优化 <a class="header-anchor" href="#_13-如何对相对路径引用进行优化" aria-label="Permalink to &quot;13. 如何对相对路径引⽤进⾏优化&quot;">​</a></h3><h3 id="_14-node文件查找优先级" tabindex="-1">14. node⽂件查找优先级 <a class="header-anchor" href="#_14-node文件查找优先级" aria-label="Permalink to &quot;14. node⽂件查找优先级&quot;">​</a></h3><h3 id="_15-npm2和npm3-有什么区别" tabindex="-1">15. npm2和npm3+有什么区别 <a class="header-anchor" href="#_15-npm2和npm3-有什么区别" aria-label="Permalink to &quot;15. npm2和npm3+有什么区别&quot;">​</a></h3><h2 id="十五、海康威视-15-问" tabindex="-1">十五、海康威视(15 问) <a class="header-anchor" href="#十五、海康威视-15-问" aria-label="Permalink to &quot;十五、海康威视(15 问)&quot;">​</a></h2><h3 id="_1-knex连接数据库响应回调" tabindex="-1">1. knex连接数据库响应回调 <a class="header-anchor" href="#_1-knex连接数据库响应回调" aria-label="Permalink to &quot;1. knex连接数据库响应回调&quot;">​</a></h3><h3 id="_2-介绍异步方案" tabindex="-1">2. 介绍异步⽅案 <a class="header-anchor" href="#_2-介绍异步方案" aria-label="Permalink to &quot;2. 介绍异步⽅案&quot;">​</a></h3><h3 id="_3-如何处理异常捕获" tabindex="-1">3. 如何处理异常捕获 <a class="header-anchor" href="#_3-如何处理异常捕获" aria-label="Permalink to &quot;3. 如何处理异常捕获&quot;">​</a></h3><h3 id="_4-项目如何管理模块" tabindex="-1">4. 项⽬如何管理模块 <a class="header-anchor" href="#_4-项目如何管理模块" aria-label="Permalink to &quot;4. 项⽬如何管理模块&quot;">​</a></h3><h3 id="_5-前端性能优化" tabindex="-1">5. 前端性能优化 <a class="header-anchor" href="#_5-前端性能优化" aria-label="Permalink to &quot;5. 前端性能优化&quot;">​</a></h3><h3 id="_6-js继承方案" tabindex="-1">6. JS继承⽅案 <a class="header-anchor" href="#_6-js继承方案" aria-label="Permalink to &quot;6. JS继承⽅案&quot;">​</a></h3><h3 id="_7-如何判断一个变量是不是数组" tabindex="-1">7. 如何判断⼀个变量是不是数组 <a class="header-anchor" href="#_7-如何判断一个变量是不是数组" aria-label="Permalink to &quot;7. 如何判断⼀个变量是不是数组&quot;">​</a></h3><h3 id="_8-变量a和b-如何交换" tabindex="-1">8. 变量a和b，如何交换 <a class="header-anchor" href="#_8-变量a和b-如何交换" aria-label="Permalink to &quot;8. 变量a和b，如何交换&quot;">​</a></h3><h3 id="_9-事件委托" tabindex="-1">9. 事件委托 <a class="header-anchor" href="#_9-事件委托" aria-label="Permalink to &quot;9. 事件委托&quot;">​</a></h3><h3 id="_10-标签生成的dom结构是一个类数组" tabindex="-1">10. 标签⽣成的Dom结构是⼀个类数组 <a class="header-anchor" href="#_10-标签生成的dom结构是一个类数组" aria-label="Permalink to &quot;10. 标签⽣成的Dom结构是⼀个类数组&quot;">​</a></h3><h3 id="_11-类数组和数组的区别" tabindex="-1">11. 类数组和数组的区别 <a class="header-anchor" href="#_11-类数组和数组的区别" aria-label="Permalink to &quot;11. 类数组和数组的区别&quot;">​</a></h3><h3 id="_12-dom的类数组如何转成数组" tabindex="-1">12. dom的类数组如何转成数组 <a class="header-anchor" href="#_12-dom的类数组如何转成数组" aria-label="Permalink to &quot;12. dom的类数组如何转成数组&quot;">​</a></h3><h3 id="_13-介绍单⻚面应用和多⻚面应用" tabindex="-1">13. 介绍单⻚⾯应⽤和多⻚⾯应⽤ <a class="header-anchor" href="#_13-介绍单⻚面应用和多⻚面应用" aria-label="Permalink to &quot;13. 介绍单⻚⾯应⽤和多⻚⾯应⽤&quot;">​</a></h3><h3 id="_14-redux状态树的管理" tabindex="-1">14. redux状态树的管理 <a class="header-anchor" href="#_14-redux状态树的管理" aria-label="Permalink to &quot;14. redux状态树的管理&quot;">​</a></h3><h3 id="_15-介绍localstorage的api" tabindex="-1">15. 介绍localstorage的API <a class="header-anchor" href="#_15-介绍localstorage的api" aria-label="Permalink to &quot;15. 介绍localstorage的API&quot;">​</a></h3><h2 id="十六、蘑菇街-15-问" tabindex="-1">十六、蘑菇街(15 问) <a class="header-anchor" href="#十六、蘑菇街-15-问" aria-label="Permalink to &quot;十六、蘑菇街(15 问)&quot;">​</a></h2><h3 id="_1-html语义化的理解" tabindex="-1">1. html语义化的理解 <a class="header-anchor" href="#_1-html语义化的理解" aria-label="Permalink to &quot;1. html语义化的理解&quot;">​</a></h3><h3 id="_2-b-和-strong-的区别" tabindex="-1">2. &lt;b&gt; 和 &lt;strong&gt; 的区别 <a class="header-anchor" href="#_2-b-和-strong-的区别" aria-label="Permalink to &quot;2. \\&lt;b\\&gt; 和 \\&lt;strong\\&gt; 的区别&quot;">​</a></h3><h3 id="_3-对闭包的理解" tabindex="-1">3. 对闭包的理解 <a class="header-anchor" href="#_3-对闭包的理解" aria-label="Permalink to &quot;3. 对闭包的理解&quot;">​</a></h3><h3 id="_4-工程中闭包使用场景" tabindex="-1">4. ⼯程中闭包使⽤场景 <a class="header-anchor" href="#_4-工程中闭包使用场景" aria-label="Permalink to &quot;4. ⼯程中闭包使⽤场景&quot;">​</a></h3><h3 id="_5-介绍this和原型" tabindex="-1">5. 介绍this和原型 <a class="header-anchor" href="#_5-介绍this和原型" aria-label="Permalink to &quot;5. 介绍this和原型&quot;">​</a></h3><h3 id="_6-使用原型最大的好处" tabindex="-1">6. 使⽤原型最⼤的好处 <a class="header-anchor" href="#_6-使用原型最大的好处" aria-label="Permalink to &quot;6. 使⽤原型最⼤的好处&quot;">​</a></h3><h3 id="_7-react设计思路" tabindex="-1">7. react设计思路 <a class="header-anchor" href="#_7-react设计思路" aria-label="Permalink to &quot;7. react设计思路&quot;">​</a></h3><h3 id="_8-为什么虚拟dom比真实dom性能好" tabindex="-1">8. 为什么虚拟DOM⽐真实DOM性能好 <a class="header-anchor" href="#_8-为什么虚拟dom比真实dom性能好" aria-label="Permalink to &quot;8. 为什么虚拟DOM⽐真实DOM性能好&quot;">​</a></h3><h3 id="_9-react常⻅的通信方式" tabindex="-1">9. react常⻅的通信⽅式 <a class="header-anchor" href="#_9-react常⻅的通信方式" aria-label="Permalink to &quot;9. react常⻅的通信⽅式&quot;">​</a></h3><h3 id="_10-redux整体的工作流程" tabindex="-1">10. redux整体的⼯作流程 <a class="header-anchor" href="#_10-redux整体的工作流程" aria-label="Permalink to &quot;10. redux整体的⼯作流程&quot;">​</a></h3><h3 id="_11-redux和全局对象之间的区别" tabindex="-1">11. redux和全局对象之间的区别 <a class="header-anchor" href="#_11-redux和全局对象之间的区别" aria-label="Permalink to &quot;11. redux和全局对象之间的区别&quot;">​</a></h3><h3 id="_12-redux数据回溯设计思路" tabindex="-1">12. Redux数据回溯设计思路 <a class="header-anchor" href="#_12-redux数据回溯设计思路" aria-label="Permalink to &quot;12. Redux数据回溯设计思路&quot;">​</a></h3><h3 id="_13-单例、工厂、观察者项目中实际场景" tabindex="-1">13. 单例、⼯⼚、观察者项⽬中实际场景 <a class="header-anchor" href="#_13-单例、工厂、观察者项目中实际场景" aria-label="Permalink to &quot;13. 单例、⼯⼚、观察者项⽬中实际场景&quot;">​</a></h3><h3 id="_14-项目中树的使用场景以及了解" tabindex="-1">14. 项⽬中树的使⽤场景以及了解 <a class="header-anchor" href="#_14-项目中树的使用场景以及了解" aria-label="Permalink to &quot;14. 项⽬中树的使⽤场景以及了解&quot;">​</a></h3><h3 id="_15-工作收获" tabindex="-1">15. ⼯作收获 <a class="header-anchor" href="#_15-工作收获" aria-label="Permalink to &quot;15. ⼯作收获&quot;">​</a></h3><h2 id="十七、酷家乐-21-问" tabindex="-1">十七、酷家乐(21 问) <a class="header-anchor" href="#十七、酷家乐-21-问" aria-label="Permalink to &quot;十七、酷家乐(21 问)&quot;">​</a></h2><h3 id="_1-react生命周期" tabindex="-1">1. react⽣命周期 <a class="header-anchor" href="#_1-react生命周期" aria-label="Permalink to &quot;1. react⽣命周期&quot;">​</a></h3><h3 id="_2-react性能优化" tabindex="-1">2. react性能优化 <a class="header-anchor" href="#_2-react性能优化" aria-label="Permalink to &quot;2. react性能优化&quot;">​</a></h3><h3 id="_3-添加原生事件不移除为什么会内存泄露" tabindex="-1">3. 添加原⽣事件不移除为什么会内存泄露 <a class="header-anchor" href="#_3-添加原生事件不移除为什么会内存泄露" aria-label="Permalink to &quot;3. 添加原⽣事件不移除为什么会内存泄露&quot;">​</a></h3><h3 id="_4-还有哪些地方会内存泄露" tabindex="-1">4. 还有哪些地⽅会内存泄露 <a class="header-anchor" href="#_4-还有哪些地方会内存泄露" aria-label="Permalink to &quot;4. 还有哪些地⽅会内存泄露&quot;">​</a></h3><h3 id="_5-setinterval需要注意的点" tabindex="-1">5. setInterval需要注意的点 <a class="header-anchor" href="#_5-setinterval需要注意的点" aria-label="Permalink to &quot;5. setInterval需要注意的点&quot;">​</a></h3><h3 id="_6-定时器为什么是不精确的" tabindex="-1">6. 定时器为什么是不精确的 <a class="header-anchor" href="#_6-定时器为什么是不精确的" aria-label="Permalink to &quot;6. 定时器为什么是不精确的&quot;">​</a></h3><h3 id="_7-settimeout-1-和settimeout-2-之间的区别" tabindex="-1">7. setTimeout(1)和setTimeout(2)之间的区别 <a class="header-anchor" href="#_7-settimeout-1-和settimeout-2-之间的区别" aria-label="Permalink to &quot;7. setTimeout(1)和setTimeout(2)之间的区别&quot;">​</a></h3><h3 id="_8-介绍宏任务和微任务" tabindex="-1">8. 介绍宏任务和微任务 <a class="header-anchor" href="#_8-介绍宏任务和微任务" aria-label="Permalink to &quot;8. 介绍宏任务和微任务&quot;">​</a></h3><h3 id="_9-promise里面和then里面执行有什么区别" tabindex="-1">9. promise⾥⾯和then⾥⾯执⾏有什么区别 <a class="header-anchor" href="#_9-promise里面和then里面执行有什么区别" aria-label="Permalink to &quot;9. promise⾥⾯和then⾥⾯执⾏有什么区别&quot;">​</a></h3><h3 id="_10-介绍purecomponet" tabindex="-1">10. 介绍pureComponet <a class="header-anchor" href="#_10-介绍purecomponet" aria-label="Permalink to &quot;10. 介绍pureComponet&quot;">​</a></h3><h3 id="_11-介绍function-component" tabindex="-1">11. 介绍Function Component <a class="header-anchor" href="#_11-介绍function-component" aria-label="Permalink to &quot;11. 介绍Function Component&quot;">​</a></h3><h3 id="_12-react数据流" tabindex="-1">12. React数据流 <a class="header-anchor" href="#_12-react数据流" aria-label="Permalink to &quot;12. React数据流&quot;">​</a></h3><h3 id="_13-props和state的区别" tabindex="-1">13. props和state的区别 <a class="header-anchor" href="#_13-props和state的区别" aria-label="Permalink to &quot;13. props和state的区别&quot;">​</a></h3><h3 id="_14-介绍react-context" tabindex="-1">14. 介绍react context <a class="header-anchor" href="#_14-介绍react-context" aria-label="Permalink to &quot;14. 介绍react context&quot;">​</a></h3><h3 id="_15-介绍class和es5的类以及区别" tabindex="-1">15. 介绍class和ES5的类以及区别 <a class="header-anchor" href="#_15-介绍class和es5的类以及区别" aria-label="Permalink to &quot;15. 介绍class和ES5的类以及区别&quot;">​</a></h3><h3 id="_16-介绍箭头函数和普通函数的区别" tabindex="-1">16. 介绍箭头函数和普通函数的区别 <a class="header-anchor" href="#_16-介绍箭头函数和普通函数的区别" aria-label="Permalink to &quot;16. 介绍箭头函数和普通函数的区别&quot;">​</a></h3><h3 id="_17-介绍defineproperty方法-什么时候需要用到" tabindex="-1">17. 介绍defineProperty⽅法，什么时候需要⽤到 <a class="header-anchor" href="#_17-介绍defineproperty方法-什么时候需要用到" aria-label="Permalink to &quot;17. 介绍defineProperty⽅法，什么时候需要⽤到&quot;">​</a></h3><h3 id="_18-for-in-和-object-keys的区别" tabindex="-1">18. for..in 和 object.keys的区别 <a class="header-anchor" href="#_18-for-in-和-object-keys的区别" aria-label="Permalink to &quot;18. for..in 和 object.keys的区别&quot;">​</a></h3><h3 id="_19-介绍闭包-使用场景" tabindex="-1">19. 介绍闭包，使⽤场景 <a class="header-anchor" href="#_19-介绍闭包-使用场景" aria-label="Permalink to &quot;19. 介绍闭包，使⽤场景&quot;">​</a></h3><h3 id="_20-使用闭包特权函数的使用场景" tabindex="-1">20. 使⽤闭包特权函数的使⽤场景 <a class="header-anchor" href="#_20-使用闭包特权函数的使用场景" aria-label="Permalink to &quot;20. 使⽤闭包特权函数的使⽤场景&quot;">​</a></h3><h3 id="_21-get和post有什么区别" tabindex="-1">21. get和post有什么区别 <a class="header-anchor" href="#_21-get和post有什么区别" aria-label="Permalink to &quot;21. get和post有什么区别&quot;">​</a></h3><h2 id="十八、百分点-14-问" tabindex="-1">十八、百分点(14 问) <a class="header-anchor" href="#十八、百分点-14-问" aria-label="Permalink to &quot;十八、百分点(14 问)&quot;">​</a></h2><h3 id="_1-react15-16-x的区别" tabindex="-1">1. React15/16.x的区别 <a class="header-anchor" href="#_1-react15-16-x的区别" aria-label="Permalink to &quot;1. React15/16.x的区别&quot;">​</a></h3><h3 id="_2-重新渲染render会做些什么" tabindex="-1">2. 重新渲染render会做些什么 <a class="header-anchor" href="#_2-重新渲染render会做些什么" aria-label="Permalink to &quot;2. 重新渲染render会做些什么&quot;">​</a></h3><h3 id="_3-哪些方法会触发react重新渲染" tabindex="-1">3. 哪些⽅法会触发react重新渲染 <a class="header-anchor" href="#_3-哪些方法会触发react重新渲染" aria-label="Permalink to &quot;3. 哪些⽅法会触发react重新渲染&quot;">​</a></h3><h3 id="_4-state和props触发更新的生命周期分别有什么区别" tabindex="-1">4. state和props触发更新的⽣命周期分别有什么区别 <a class="header-anchor" href="#_4-state和props触发更新的生命周期分别有什么区别" aria-label="Permalink to &quot;4. state和props触发更新的⽣命周期分别有什么区别&quot;">​</a></h3><h3 id="_5-setstate是同步还是异步" tabindex="-1">5. setState是同步还是异步 <a class="header-anchor" href="#_5-setstate是同步还是异步" aria-label="Permalink to &quot;5. setState是同步还是异步&quot;">​</a></h3><h3 id="_6-对无状态组件的理解" tabindex="-1">6. 对⽆状态组件的理解 <a class="header-anchor" href="#_6-对无状态组件的理解" aria-label="Permalink to &quot;6. 对⽆状态组件的理解&quot;">​</a></h3><h3 id="_7-介绍redux工作流程" tabindex="-1">7. 介绍Redux⼯作流程 <a class="header-anchor" href="#_7-介绍redux工作流程" aria-label="Permalink to &quot;7. 介绍Redux⼯作流程&quot;">​</a></h3><h3 id="_8-介绍es6的功能" tabindex="-1">8. 介绍ES6的功能 <a class="header-anchor" href="#_8-介绍es6的功能" aria-label="Permalink to &quot;8. 介绍ES6的功能&quot;">​</a></h3><h3 id="_9-let、const以及var的区别" tabindex="-1">9. let、const以及var的区别 <a class="header-anchor" href="#_9-let、const以及var的区别" aria-label="Permalink to &quot;9. let、const以及var的区别&quot;">​</a></h3><h3 id="_10-浅拷⻉和深拷⻉的区别" tabindex="-1">10. 浅拷⻉和深拷⻉的区别 <a class="header-anchor" href="#_10-浅拷⻉和深拷⻉的区别" aria-label="Permalink to &quot;10. 浅拷⻉和深拷⻉的区别&quot;">​</a></h3><h3 id="_11-介绍箭头函数的this" tabindex="-1">11. 介绍箭头函数的this <a class="header-anchor" href="#_11-介绍箭头函数的this" aria-label="Permalink to &quot;11. 介绍箭头函数的this&quot;">​</a></h3><h3 id="_12-介绍promise和then" tabindex="-1">12. 介绍Promise和then <a class="header-anchor" href="#_12-介绍promise和then" aria-label="Permalink to &quot;12. 介绍Promise和then&quot;">​</a></h3><h3 id="_13-介绍快速排序" tabindex="-1">13. 介绍快速排序 <a class="header-anchor" href="#_13-介绍快速排序" aria-label="Permalink to &quot;13. 介绍快速排序&quot;">​</a></h3><h3 id="_14-算法-前k个最大的元素" tabindex="-1">14. 算法：前K个最⼤的元素 <a class="header-anchor" href="#_14-算法-前k个最大的元素" aria-label="Permalink to &quot;14. 算法：前K个最⼤的元素&quot;">​</a></h3><h2 id="十九、海风教育-14-问" tabindex="-1">十九、海风教育(14 问) <a class="header-anchor" href="#十九、海风教育-14-问" aria-label="Permalink to &quot;十九、海风教育(14 问)&quot;">​</a></h2><h3 id="_1-对react看法-它的优缺点" tabindex="-1">1. 对react看法，它的优缺点 <a class="header-anchor" href="#_1-对react看法-它的优缺点" aria-label="Permalink to &quot;1. 对react看法，它的优缺点&quot;">​</a></h3><h3 id="_2-使用过程中遇到的问题-如何解决的" tabindex="-1">2. 使⽤过程中遇到的问题，如何解决的 <a class="header-anchor" href="#_2-使用过程中遇到的问题-如何解决的" aria-label="Permalink to &quot;2. 使⽤过程中遇到的问题，如何解决的&quot;">​</a></h3><h3 id="_3-react的理念是什么-拿函数式编程来做⻚面渲染" tabindex="-1">3. react的理念是什么（拿函数式编程来做⻚⾯渲染） <a class="header-anchor" href="#_3-react的理念是什么-拿函数式编程来做⻚面渲染" aria-label="Permalink to &quot;3. react的理念是什么（拿函数式编程来做⻚⾯渲染）&quot;">​</a></h3><h3 id="_4-js是什么范式语言-面向对象还是函数式编程" tabindex="-1">4. JS是什么范式语⾔(⾯向对象还是函数式编程) <a class="header-anchor" href="#_4-js是什么范式语言-面向对象还是函数式编程" aria-label="Permalink to &quot;4. JS是什么范式语⾔(⾯向对象还是函数式编程)&quot;">​</a></h3><h3 id="_5-koa原理-为什么要用koa-express和koa对比" tabindex="-1">5. koa原理，为什么要⽤koa(express和koa对⽐) <a class="header-anchor" href="#_5-koa原理-为什么要用koa-express和koa对比" aria-label="Permalink to &quot;5. koa原理，为什么要⽤koa(express和koa对⽐)&quot;">​</a></h3><h3 id="_6-使用的koa中间件" tabindex="-1">6. 使⽤的koa中间件 <a class="header-anchor" href="#_6-使用的koa中间件" aria-label="Permalink to &quot;6. 使⽤的koa中间件&quot;">​</a></h3><h3 id="_7-es6使用的语法" tabindex="-1">7. ES6使⽤的语法 <a class="header-anchor" href="#_7-es6使用的语法" aria-label="Permalink to &quot;7. ES6使⽤的语法&quot;">​</a></h3><h3 id="_8-promise-和-async-await-和-callback的区别" tabindex="-1">8. Promise 和 async/await 和 callback的区别 <a class="header-anchor" href="#_8-promise-和-async-await-和-callback的区别" aria-label="Permalink to &quot;8. Promise 和 async/await 和 callback的区别&quot;">​</a></h3><h3 id="_9-promise有没有解决异步的问题-promise链是真正强大的地方" tabindex="-1">9. Promise有没有解决异步的问题（promise链是真正强⼤的地⽅） <a class="header-anchor" href="#_9-promise有没有解决异步的问题-promise链是真正强大的地方" aria-label="Permalink to &quot;9. Promise有没有解决异步的问题（promise链是真正强⼤的地⽅）&quot;">​</a></h3><h3 id="_10-promise和settimeout的区别-event-loop" tabindex="-1">10. Promise和setTimeout的区别（Event Loop） <a class="header-anchor" href="#_10-promise和settimeout的区别-event-loop" aria-label="Permalink to &quot;10. Promise和setTimeout的区别（Event Loop）&quot;">​</a></h3><h3 id="_11-进程和线程的区别-一个node实例就是一个进程-node是单线程-通过-事件循环来实现异步" tabindex="-1">11. 进程和线程的区别（⼀个node实例就是⼀个进程，node是单线程，通过 事件循环来实现异步 <a class="header-anchor" href="#_11-进程和线程的区别-一个node实例就是一个进程-node是单线程-通过-事件循环来实现异步" aria-label="Permalink to &quot;11. 进程和线程的区别（⼀个node实例就是⼀个进程，node是单线程，通过 事件循环来实现异步&quot;">​</a></h3><h3 id="_12-介绍下dfs深度优先" tabindex="-1">12. 介绍下DFS深度优先 <a class="header-anchor" href="#_12-介绍下dfs深度优先" aria-label="Permalink to &quot;12. 介绍下DFS深度优先&quot;">​</a></h3><h3 id="_13-介绍下观察者模式" tabindex="-1">13. 介绍下观察者模式 <a class="header-anchor" href="#_13-介绍下观察者模式" aria-label="Permalink to &quot;13. 介绍下观察者模式&quot;">​</a></h3><h3 id="_14-观察者模式里面使用的数据结构-不具备顺序-是一个list" tabindex="-1">14. 观察者模式⾥⾯使⽤的数据结构(不具备顺序 ，是⼀个list) <a class="header-anchor" href="#_14-观察者模式里面使用的数据结构-不具备顺序-是一个list" aria-label="Permalink to &quot;14. 观察者模式⾥⾯使⽤的数据结构(不具备顺序 ，是⼀个list)&quot;">​</a></h3>',439),i=[h];function l(n,d,s,c,u,b){return r(),e("div",null,i)}const m=a(o,[["render",l]]);export{_ as __pageData,m as default};
