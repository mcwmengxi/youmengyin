import{_ as i,c as l,o as s,a4 as a}from"./chunks/framework.BqiyKu1v.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/interview/javascript.md","filePath":"docs/interview/javascript.md","lastUpdated":1711297244000}'),n={name:"docs/interview/javascript.md"},t=a(`<h2 id="导致页面加载白屏时间长的原因有哪些-怎么进行优化" tabindex="-1">导致页面加载白屏时间长的原因有哪些？怎么进行优化？ <a class="header-anchor" href="#导致页面加载白屏时间长的原因有哪些-怎么进行优化" aria-label="Permalink to &quot;导致页面加载白屏时间长的原因有哪些？怎么进行优化？&quot;">​</a></h2><p>原因</p><ul><li>css加载放在head中会阻塞渲染，加载时间长会出现页面白屏</li><li>js加载和执行会阻塞页面解析和渲染，加载时间长会出现页面白屏</li></ul><h2 id="微前端中的应用隔离是什么" tabindex="-1">微前端中的应用隔离是什么？ <a class="header-anchor" href="#微前端中的应用隔离是什么" aria-label="Permalink to &quot;微前端中的应用隔离是什么？&quot;">​</a></h2><p>分为主应用和微应用 js代码的隔离，css的隔离，</p><p><strong>css隔离</strong></p><ul><li>css module 或者命名空间的方式 添加特定的前缀，postcss插件 打包添加特定前缀</li><li>微应用之间 css隔离，使用scoped link style 打标 去标</li><li>shodow dom</li></ul><p><strong>js隔离</strong></p><ul><li>sandbox 沙箱机制 window 全局事件</li><li>js with windwow.Proxy 对象</li></ul><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><p>理思路：</p><ul><li><p>将概念</p><ul><li>红宝书 闭包是指有权访问另一个函数作用域中变量的函数</li><li>mdn: 指那些能够访问自由变量的函数，这里的自由变量是指外部作用域 <ul><li>涉及到那些作用域 <ul><li>全局作用域</li><li>局部作用域</li><li>词法作用域 --&gt;作用域链（js继承方式）</li><li>执行上下文</li></ul></li></ul></li></ul></li><li><p>优缺点</p><ul><li>优点 私有化数据，在私有化数据的基础上保持数据 <ul><li>任何在函数中定义的变量，都可以看作是私有变量 举个例子 防抖</li></ul></li><li>缺点 可能会导致内存泄漏，内部的变量不会被自动回收掉 <ul><li>垃圾回收机制 <ul><li>标记清除</li><li>引用计数</li><li>新生代 老生代</li></ul></li></ul></li></ul></li><li><p>说用途</p><ul><li>防抖节流</li><li>vue</li><li>react</li></ul></li></ul><h2 id="_1-手写防抖函数" tabindex="-1">1. 手写防抖函数 <a class="header-anchor" href="#_1-手写防抖函数" aria-label="Permalink to &quot;1. 手写防抖函数&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">delay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _this </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_this, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },delay)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_1-前端需要注意哪些-seo" tabindex="-1">1. 前端需要注意哪些 SEO ? <a class="header-anchor" href="#_1-前端需要注意哪些-seo" aria-label="Permalink to &quot;1. 前端需要注意哪些 SEO ?&quot;">​</a></h2><ol><li>网站结构布局 : <ul><li>控制首页链接数量 网站首页是权重最高的地方。不能过少( &quot;蜘蛛&quot; 不愿爬 )、不能过多(链接过多会影响用户体验，降低页面权重).</li><li>扁平化页面结构布局,例如目录结构尽量不超过 3 级( 超过 3 级，&quot;蜘蛛&quot; 就可能不愿意向下爬了 )。</li><li>导航优化, 网站导航尽量使用文字，如果需要使用图片则必须添加 alt 和 title 属性, 另外也可以在图片未能正常加载的时候给用户友好体验。</li><li>页面头部主要放置(logo 、主导航及用户信息)、页面主体放置(左边放面包屑以及正文,右边放热门文章和相关文章【 可以起到挽留用户，增强页面权重的作用 】)。在设计分页的时候推荐 1 2 3 4 5 6 这种，不推荐 首页 下一页 尾页 这种、页面底部放置(版权信息和友链)。</li><li>把重要的内容放在前面(搜索引擎是从上到下抓取的)。</li><li>页面大小最好不超过 100k ， 如果页面加载速度慢可能会遗失部分用户且一旦超时 &quot;蜘蛛&quot; 便不在抓取收录。</li></ul></li><li>代码优化 : <ul><li>可以利用 title 标签和 meta 标签的 description、keywords 属性来设置关键词和概括页面内容( 并且关键词尽量不要重复出现、关键词也切记过多 )。</li><li>html 代码书写要符合 W3C 规范( 注重标签语义化 )。 <ul><li>a 标签：站内链接要加上 title 属性来告知 &quot;蜘蛛&quot; 和 用户一些链接的关键信息、站外链接要加上 el=&quot;nofollow&quot; 属性，告诉 &quot;蜘蛛&quot; 不要去爬。</li><li>h1 标签：一个页面最多出现 1 个 h1 标签(用于承载站点的最重要的标题或者页面的 logo)。</li><li>table 标签：表格标签的标题应该使用 &lt;caption&gt; 标包裹签来定义。</li><li>strong 和 em 标签：strong 标签包裹的内容相对于其他标签会引起搜索引擎的重视。em 的强调效果要低于 strong。</li><li>文本缩进尽量不使用 <code>&amp;nbsp;</code>，而是用 css 来控制。版权符号使用 <code>&amp;copy;</code> 而不是直接使用符号 <code>©</code>。</li><li>尽可能少的使用 js 来动态的渲染内容，因为 &quot;蜘蛛&quot; 抓不到动态渲染的内容(React 和 Vue 大行其道的年代的解决方案另说)。</li><li>慎用 <code>display: none;</code> &quot;蜘蛛&quot; 可能不会抓取其中的内容，对于不想展示的内容可以 z-index 、偏移度 足够大。</li><li>减少使用 iframe，&quot;蜘蛛&quot; 不会去抓 iframe 中的内容。</li></ul></li></ul></li><li>增加自己的网站的导入链接</li><li>提高网站的加载速度( 编码层面、资源加载层面等 )</li><li>向各大搜索引擎登录入口提交尚未被搜索引擎收录的链接。</li><li>生成站点地图 sitemap</li></ol><h2 id="_2-http-的几种请求方式和用途" tabindex="-1">2. HTTP 的几种请求方式和用途 ? <a class="header-anchor" href="#_2-http-的几种请求方式和用途" aria-label="Permalink to &quot;2. HTTP 的几种请求方式和用途 ?&quot;">​</a></h2><p><strong>比较常见的 :</strong></p><ul><li>GET 请求：请求资源</li><li>POST 请求：传输请求实体</li><li>PUT 请求：传输文件</li><li>DELETE 请求：删除文件</li><li>HEAD 请求：获取响应报头首部</li><li>OPTIONS 请求：询问服务器支持的 HTTP 方法</li></ul><p>其中有几点需要说明一下 :</p><ol><li><p>POST 请求与 PUT 请求很像，比较容易混淆，二者的区别在于 : 如果是一个更新操作，不会有新的资源产生则使用 PUT 请求，如果有新的资源产生就应该使用 POST 请求<br> 也即 : GET、POST、PUT、DELATE 分别对应着【 查、增、更、删 】( 这种请求也被称为 REST 风格请求 )</p></li><li><p>OPTIONS 请求平常看不到，在哪可以看到 ? OPTIONS 请求在跨域请求数据的场景中是可以看到的。所以后端针对于浏览器发出真实请求之前的嗅探请求 OPTIONS ，就应该做出正确的响应，否则后面的真实的请求是不会发出的。实际上这个 OPTIONS 请求就是一个询问后端支持即将要发送请求属性的程度，如果满足即将发送的请求的发送条件则该请求会在 OPTIONS 请求得到响应之后发送。</p></li><li><p>HEAD 请求也不是常见的请求，代表什么意思 ? 浏览器发送 HEAD 请求是不会有实质的响应体返回的，但会返回响应体首部。</p></li></ol><ul><li>通常被用来检查资源的有效性。</li><li>检查超链接的有效性。</li><li>检查网页是否被篡改。</li><li>可用于机器人获取网页标准信息,获取 rss 种子信息或传递安全认证信息。</li></ul><h2 id="_3-从浏览器地址栏输入-url-到页面显示的步骤" tabindex="-1">3. 从浏览器地址栏输入 URL 到页面显示的步骤? <a class="header-anchor" href="#_3-从浏览器地址栏输入-url-到页面显示的步骤" aria-label="Permalink to &quot;3. 从浏览器地址栏输入 URL 到页面显示的步骤?&quot;">​</a></h2><ol><li>【url解析】浏览器对url进行解析</li></ol><ul><li>url 包括( 协议、网络地址、资源路径 )</li><li>如果是合法地址浏览器会进行相应的操作，如果不是合法地址会转给默认的搜索引擎，由搜索引擎对该字段进行搜索【 就和你直接在谷歌浏览器的地址栏上输入要搜索的内容一样，当 url 不合法的时候一般默认的搜索引擎都会进行类似的搜索 】。</li></ul><ol start="2"><li>【DNS域名解析】将url中的域名解析成ip地址</li></ol><ul><li>缓存中查找 <ul><li>浏览器缓存中查找对应的缓存的DNS域名解析记录</li><li>然后本机host文件中查找解析记录</li><li>最后到路由器缓存中查找解析记录</li></ul></li><li>DNS服务器查找 <ul><li>先在本地DNS服务器中查找解析记录</li><li>然后进行递归查询(本地DNS服务器向上一层DNS服务器请求(权限域名服务器-&gt;顶级域名服务器-&gt;根域名服务器),直至递归请求到根域名服务器)</li></ul></li></ul><ol start="3"><li>【TCP3次握手基于ip建立TCP连接】</li></ol><ul><li>客户端向服务端发送SYN数据包</li><li>服务端接收SYN数据包，并返回SYN-ACK数据包</li><li>客户端接收SYN-ACK数据包，并发送ACK数据包</li></ul><ol start="4"><li>基于建立好的 TCP 连接，客户端向服务器发送请求。</li><li>服务器接收到请求，解析请求，返回响应。</li><li>【 TCP 4 次挥手断开 TCP 连接 】:</li></ol><ul><li>客户端发送 Fin=1 报文、Ack=Z 报文、Seq=X 报文【 (客户端) : 我要关闭 TCP 连接了，如果你那边也关闭的话记得 Ack 告诉我是 X</li><li>服务器接收客户端传来的报文并返回 Ack = X+1 报文、Seq=Z 报文【 (服务器) : 我这边知道你打算关闭 TCP 连接了，为了让你知，在传 ACK 的时候我会将刚才的 Fin 值 1 也一并加上并返回，但是我这边数据还没有传送完，所以当我传送完的时候， ACK 我会告诉你是 X 】</li><li>服务器发送 Fin=1、Ack=X、Seq=Y 报文【 (服务器) : 我这边数据传输完了，可以关闭了，ACK 给你传了 X，如果你那边已经决定断开则 ACK 给我回传一个 Y 】</li><li>客户端发送 Ack=Y、Seq=X 报文【 (浏览器) : 我决定断开了，ACK 给你传个 Y 】</li></ul><ol start="7"><li>浏览器接收响应数据并解析 html 、js、css 等资源</li><li>浏览器布局并渲染</li><li>页面呈现</li></ol><h2 id="_4-如何进行网站性能优化" tabindex="-1">4. 如何进行网站性能优化 ? <a class="header-anchor" href="#_4-如何进行网站性能优化" aria-label="Permalink to &quot;4. 如何进行网站性能优化 ?&quot;">​</a></h2><p><strong>浏览器处理用户请求的过程 :</strong></p><p>重定向 -&gt; 拉取缓存 -&gt; DNS 查询 -&gt; 建立 TCP 连接 -&gt; 发起请求 -&gt; 接收响应 -&gt; 处理 HTML 元素 -&gt; 元素加载完成</p><h3 id="一、网络性能优化" tabindex="-1">一、网络性能优化 : <a class="header-anchor" href="#一、网络性能优化" aria-label="Permalink to &quot;一、网络性能优化 :&quot;">​</a></h3><h4 id="减少请求次数" tabindex="-1">减少请求次数 <a class="header-anchor" href="#减少请求次数" aria-label="Permalink to &quot;减少请求次数&quot;">​</a></h4><p><strong>1. 使用缓存</strong></p>`,38),e=[t];function p(h,r,o,k,u,d){return s(),l("div",null,e)}const g=i(n,[["render",p]]);export{E as __pageData,g as default};
